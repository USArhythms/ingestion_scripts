%Widefield_2Photon_nwb.m

%REMOVE DETAIL, IF NOT RELEVANT FOR PROCESSING: (JACOB TO CLEAN UP)
%%Save data as csv in individual image folder. Get rid of plotting.
%Save separate nwb file for each subject. Associate data with figure

%Make figure saving functions
%Don't create figures poping up

%% Nice to have
%Add imaging_plane excitation lambda rate etc.
%drop in images from figures.
%%

%#################################################################
% APP CONSTANTS (DEFAULT)
clear; clc; close all;
primary_experiments_table = readtable('Z:\Jacob\nwb_process\input_widefield_2P.xlsx'); %EXPERIMENTAL SUBJECT: PRIMARY DATA INGESTION TABLE
output_path = "D:\temp\output\"; %NWB file written to this location
summary_data_path = "Z:\drinehart\VesCorrPhase\"; %formerly 'input_path'
%#################################################################

%PRE-PROCESSING / PREREQUISITES
% Check if output_path exists, create it if not
if ~exist(output_path, 'dir')
    mkdir(output_path);
end
warning('off','all')

%#################################################################
function process_images(src_folder_directory, imaging_plane_name)
    % READ src_folder_directory LOCATION (EXCEL FILE)
    % LOOP THROUGH EXCEL FILENAMES
    % READ IMAGE FILE
    % STORE IN NWB FORMAT

    disp(['READING LOCATION: ', src_folder_directory])
    img_location = readtable(src_folder_directory);

    for runnum = 1:length(img_location.runnum)
disp(['READING LOCATION: ', runnum])

        % TODO: read meta-data file for NWB

        % current_folder = img_location.folder{runnum};
        % tif_files = dir(fullfile(current_folder, '*.tif'));
        % disp(['TIF files in folder: ' current_folder]);
        % for i = 1:length(tif_files)
        %     disp(tif_files(i).name);
        % end
        % disp(' ');

    end

    
    
    %data will be array for image
    img_data = ones(200, 100, 1000)
    
    
    InternalTwoPhoton = types.core.TwoPhotonSeries( ...
    'imaging_plane', types.untyped.SoftLink(imaging_plane), ...
    'starting_time', 0.0, ...
    'starting_time_rate', 3.0, ...
    'data', img_data, ...
    'data_unit', 'lumens');
 
nwb.acquisition.set('2pInternal', InternalTwoPhoton);
    %return imaging_plane
end
%#################################################################

%#################################################################
%PROCESS EACH LINE (EXPERIMENTAL SUBJECT) OF primary_experiments_table
%#################################################################
for subj = 1:length(primary_experiments_table.age)
    %Initialize subject information
    age = string(primary_experiments_table.age(subj));
    if startsWith(age,'P') && endsWith(age,'D')
        subj_age = age
    elseif startsWith(age,'P') && ~endsWith(age,'D')
        subj_age = strcat(age,'D')
    elseif ~startsWith(age,'P') && endsWith(age,'D')
        subj_age = strcat('P',age)
    elseif ~startsWith(age,'P') && ~endsWith(age,'D')
        subj_age = strcat('P',age,'D')
    end
    
    subj_species = primary_experiments_table.species(subj);
    subj_sex = primary_experiments_table.sex(subj);
    subj_id = primary_experiments_table.subject_id(subj);
    subj_description = primary_experiments_table.subject_description(subj);
    subj_strain = primary_experiments_table.subject_strain(subj);
    subj_DOB = primary_experiments_table.date_of_birth_YYYY_MM_DD_(subj);
    subj_genotype = primary_experiments_table.genotype(subj);
    % Determine which experiment data to include with this subject.
    subj_figs = primary_experiments_table.session_description(subj);
    subj_session_id = primary_experiments_table.session_id(subj);
    subj_surgery = primary_experiments_table.surgery(subj);
    subj_stim = primary_experiments_table.stimulus_notes(subj);

    %ADD META-DATA TO NWB OBJECT:
    tmp_Subject = getsubject(char(subj_age),'days',subj_species,subj_sex,subj_id,subj_description,subj_strain,subj_DOB,subj_genotype);
    researcher_experimenter = primary_experiments_table.experimenters(subj); 
    institution = primary_experiments_table.institution(subj);

    nwb = NwbFile(...
        'session_description', 'Long-wavelength traveling waves of vasomotion modulate the perfusion of cortex', ...
        'identifier', subj_session_id, ...
        'session_start_time', datetime('today',TimeZone="America/Los_Angeles"), ...
        'general_experimenter', researcher_experimenter, ...
        'general_institution', institution, ...
        'general_experiment_description','Two-photon and Wide-field experiments on pial and penetrating arterioles', ...
        'general_keywords','Neurovascular coupling, oscillator, penetrating arteriole, perfusion, pia, resting state, vasodynamics',...
        'surgery',subj_surgery,...
        'stimulus_notes',subj_stim...
        );
    nwb.general_subject = types.core.Subject();
    nwb.general_subject = tmp_Subject;
    nwb;

    %% Add device object
    subj_device = primary_experiments_table.device_name(subj);
    subj_device_description = primary_experiments_table.device_description(subj);
    device1 = types.core.Device( ...
        'name', subj_device{1}, ...
        'description', subj_device_description{1});
    nwb.general_devices.set('Imaging device',device1);
   
    %#################################################################
    % PROCESS RAW IMAGES BELOW
    %#################################################################
    src_folder_directory = primary_experiments_table.src_folder_directory(subj);

    % how much of this info is in meta data text file?
    imaging_plane_name = 'imaging_plane'; %name of experiment?
    imaging_plane = types.core.ImagingPlane( ...
        'optical_channel', optical_channel, ...
        'description', 'a very interesting part of the brain', ...
        'device', types.untyped.SoftLink(device), ...
        'excitation_lambda', 600., ...
        'imaging_rate', 5., ...
        'indicator', 'GFP', ...
        'location', 'my favorite brain location');
    process_images(src_folder_directory, imaging_plane) %pass by reference to imageing_plane?
    nwb.general_optophysiology.set(imaging_plane_name, imaging_plane);

    %#################################################################
    % PROCESS SUMMARY FIGURES BELOW %
    %#################################################################

    %% #################################################################
    % Figure 1D start
    if contains(subj_figs,' 1d')
        clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path
        
        table = readtable(strcat(summary_data_path, "\IndividualFigures\Fig1\D\Fig_1D_trace_data.csv"));
        time = table.time_s;
        flux_Hz = table.flux_Hz;
        diameter_um = 2.*table.radius_um;

        timeseries_flux = nwb.acquisition.set('FluxTrace1D', types.core.TimeSeries('data', flux_Hz, 'description', 'FluxTrace (Hz)','data_unit','Hz',...
            'timestamps',time));
        timeseries_diameter = nwb.acquisition.set('DiameterTrace1D', types.core.TimeSeries('data', diameter_um, 'description', 'DiameterTrace (um)','data_unit','um',...
            'timestamps',time));
    end
    %#################################################################

    %% #################################################################
    % Figure 1E Start
    if contains(subj_figs,' 1e')
    %Try dynamic table....
    traces_tbl = readtable(strcat(summary_data_path, '\IndividualFigures\Fig1\E\DiameterModExample_Traces_1E.csv'));
    edges_tbl = readtable(strcat(summary_data_path, '\IndividualFigures\Fig1\E\DiameterModExample_Edges_1E.csv'));

    %traces_tbl = readtable('Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig1\E\DiameterModExample_Traces_1E.csv');
    %edges_tbl = readtable('Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig1\E\DiameterModExample_Edges_1E.csv');
    phase_trace = traces_tbl.phase_trace;
    diam_trace = traces_tbl.diam_trace;
    phase_edges = edges_tbl.phase_edge;
    diam_edges = edges_tbl.diam_edge;
%     figure; histogram2(phase_trace,diam_trace,phase_edges,diam_edges,'DisplayStyle','tile');

        %Assign to dynamic table: Pia
        col1 = types.hdmf_common.VectorData( ...
            'description', 'phase trace (rad)', ...
            'data', phase_trace);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'diam trace (um)', ...
            'data', diam_trace);
        table_1E_Traces = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'phase trace', col1, ...
            'diam trace', col2, ...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_1E_Traces;
        nwb.analysis.set('Diameter Modulation Joint Distribution 1E Traces', table_1E_Traces);

        %Assign to dynamic table
        col1 = types.hdmf_common.VectorData( ...
            'description', 'phase bin edges (rad)', ...
            'data', phase_edges);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'diam bin edges (um)', ...
            'data', diam_edges);
        table_1E_BinEdges = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'phase bin edges', col1, ...
            'diam bin edges', col2, ...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_1E_BinEdges;
        nwb.analysis.set('DiameterModulationJointDistributionEdges1E', table_1E_BinEdges);
    end
    %#################################################################

    %% Figure 1F Start - uses 'dynamic table'
    if contains(subj_figs,' 1f')

    traces_tbl = readtable(strcat(summary_data_path, '\IndividualFigures\Fig1\F\FluxModExample_Traces_1F.csv'));
    edges_tbl = readtable(strcat(summary_data_path, '\IndividualFigures\Fig1\\F\FluxModExample_Edges_1F.csv'));

    %traces_tbl = readtable('Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig1\F\FluxModExample_Traces_1F.csv');
    %edges_tbl = readtable('Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig1\F\FluxModExample_Edges_1F.csv');
    phase_trace = traces_tbl.phase_trace;
    flux_trace = traces_tbl.flux_trace;
    phase_edges = edges_tbl.phase_edge;
    flux_edges = edges_tbl.flux_edge;
%     figure; histogram2(phase_trace,diam_trace,phase_edges,diam_edges,'DisplayStyle','tile');

        %Assign to dynamic table: Pia
        col1 = types.hdmf_common.VectorData( ...
            'description', 'phase trace (rad)', ...
            'data', phase_trace);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'flux trace (Hz)', ...
            'data', flux_trace);
        table_1F_Traces = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'phase trace', col1, ...
            'flux trace', col2, ...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_1F_Traces;
        nwb.analysis.set('FluxModulationJointDistributionTraces1F', table_1F_Traces);

        %Assign to dynamic table
        col1 = types.hdmf_common.VectorData( ...
            'description', 'phase bin edges (rad)', ...
            'data', phase_edges);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'flux bin edges (Hz)', ...
            'data', flux_edges);
        table_1F_BinEdges = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'phase bin edges', col1, ...
            'flux bin edges', col2, ...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_1F_BinEdges;
        nwb.analysis.set('FluxModulationJointDistributionEdges1F', table_1F_BinEdges);
    end

    %% Figure 1G Start - uses 'dynamic table'
    if contains(subj_figs,' 1g')

        traces_tbl = readtable(strcat(summary_data_path, '\IndividualFigures\Fig1\G\Flux_Diameter_Example_Traces_1G.csv'));
        edges_tbl = readtable(strcat(summary_data_path, '\IndividualFigures\Fig1\G\Flux_Diameter_Example_Edges_1G.csvv'));

        %traces_tbl = readtable('Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig1\G\Flux_Diameter_Example_Traces_1G.csv');
        %edges_tbl = readtable('Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig1\G\Flux_Diameter_Example_Edges_1G.csv');
        diam_trace = traces_tbl.d_trace_n;
        flux_trace = traces_tbl.flux_trace_n;
        diam_edges = edges_tbl.d_n_edge;
        flux_edges = edges_tbl.flux_n_edge;
%             figure; histogram2(diam_trace,flux_trace,diam_edges,flux_edges,'DisplayStyle','tile');

        %Assign to dynamic table: Pia
        col1 = types.hdmf_common.VectorData( ...
            'description', 'normalized diam trace', ...
            'data', diam_trace);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'normalized flux trace', ...
            'data', flux_trace);
        table_1G_Traces = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'normalized diam trace', col1, ...
            'normalized flux trace', col2, ...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_1G_Traces;
        nwb.analysis.set('FluxDiameterModulationJointDistributionTraces1G', table_1G_Traces);

        %Assign to dynamic table
        col1 = types.hdmf_common.VectorData( ...
            'description', 'normalized diam bin edges', ...
            'data', diam_edges);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'normalized flux bin edges', ...
            'data', flux_edges);
        table_1G_BinEdges = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'normalized diam bin edges', col1, ...
            'normalized flux bin edges', col2, ...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_1G_BinEdges;
        nwb.analysis.set('FluxDiameterModulationJointDistributionEdges1G', table_1G_BinEdges);
    end

    %% Figure 1H Start
    if contains(subj_figs,' 2h')
        clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path
        %Scatter plot, R2 vs diameter modulation

        table = readtable(strcat(summary_data_path, '\IndividualFigures\Fig1\H\DiameterModulation.csv'));
        %table = readtable('\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\IndividualFigures\Fig1\H\DiameterModulation.csv');

        is_pia = logical(table.is_pia);
        a_c = table.a2c;
        a_c_fit_R2 = table.a2c_fit_R2;
        avg_diam = 2.*table.avg_radius_um;

        piaA_c = a_c(is_pia);
        PAA_c = a_c(~is_pia);
        piaA_c_R2 = a_c_fit_R2(is_pia);
        PAA_c_R2 = a_c_fit_R2(~is_pia);
        piaA_c_Diam = avg_diam(is_pia);
        PAA_c_Diam = avg_diam(~is_pia);

        %Assign to dynamic table: Pia
        col1 = types.hdmf_common.VectorData( ...
            'description', 'Pia Modulation Depth', ...
            'data', piaA_c);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'Pia Fit R2', ...
            'data', piaA_c_R2);
        col3 = types.hdmf_common.VectorData( ...
            'description', 'Pia Average Diameter (um)', ...
            'data', piaA_c_Diam);
        table_1H_Pia = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'Pia Modulation Depth', col1, ...
            'Pia Fit R2', col2, ...
            'Pia Average Diameter',col3,...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_1H_Pia;

        nwb.analysis.set('PiaDiameterModulation1H', table_1H_Pia);

        %Assign to dynamic table: PA
        col1 = types.hdmf_common.VectorData( ...
            'description', 'PA Modulation Depth', ...
            'data', PAA_c);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'PA Fit R2', ...
            'data', PAA_c_R2);
        col3 = types.hdmf_common.VectorData( ...
            'description', 'PA Average Diameter (um)', ...
            'data', PAA_c_Diam);
        table_1H_PA = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'PA Modulation Depth', col1, ...
            'PA Fit R2', col2, ...
            'PA Average Diameter',col3,...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_1H_PA;

        nwb.analysis.set('PADiameterModulation1H', table_1H_PA);
    end

    %% Figure 1I start
    if contains(subj_figs,' 1i')
        clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path
        %Scatter plot, R2 vs diameter modulation

        table = readtable(strcat(summary_data_path, '\IndividualFigures\Fig1\I\FluxModulation.csv'));
        %table = readtable('\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\IndividualFigures\Fig1\I\FluxModulation.csv');

        is_pia = logical(table.is_pia);
        a_c = table.a2c;
        a_c_fit_R2 = table.a2c_fit_R2;
        avg_diam = table.avg_diameter_um;

        piaA_c = a_c(is_pia);
        PAA_c = a_c(~is_pia);
        piaA_c_R2 = a_c_fit_R2(is_pia);
        PAA_c_R2 = a_c_fit_R2(~is_pia);
        piaA_c_Diam = avg_diam(is_pia);
        PAA_c_Diam = avg_diam(~is_pia);

        %Assign to dynamic table: Pia
        col1 = types.hdmf_common.VectorData( ...
            'description', 'Pia Flux Modulation Depth', ...
            'data', piaA_c);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'Pia Flux Fit R2', ...
            'data', piaA_c_R2);
        col3 = types.hdmf_common.VectorData( ...
            'description', 'Pia Average Diameter (um)', ...
            'data', piaA_c_Diam);
        table_1I_Pia = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'Pia Flux Modulation Depth', col1, ...
            'Pia Flux Fit R2', col2, ...
            'Pia Average Diameter',col3,...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_1I_Pia;

        nwb.analysis.set('PiaFluxModulation1I', table_1I_Pia);

        %Assign to dynamic table: PA
        col1 = types.hdmf_common.VectorData( ...
            'description', 'PA Flux Modulation Depth', ...
            'data', PAA_c);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'PA Flux Fit R2', ...
            'data', PAA_c_R2);
        col3 = types.hdmf_common.VectorData( ...
            'description', 'PA Average Diameter (um)', ...
            'data', PAA_c_Diam);
        table_1I_PA = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'PA Modulation Depth', col1, ...
            'PA Fit R2', col2, ...
            'PA Average Diameter',col3,...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_1I_PA;

        nwb.analysis.set('PAFluxModulation1I', table_1I_PA);
    end

    %% Figure 1J start
    if contains(subj_figs,' 1j')
        clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path
        %Scatter plot, invVar vs diameter modulation
        
        table = readtable(strcat(summary_data_path, '\IndividualFigures\Fig1\J\Flux_Diameter_Modulation.csv'));
        %table = readtable('\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\IndividualFigures\Fig1\J\Flux_Diameter_Modulation.csv');

        is_pia = logical(table.is_pia);
        beta = table.q2r_k;
        beta_invVAR = table.q2r_invVAR;
        avg_diam = table.avg_diameter_um;

        pia_beta = beta(is_pia);
        PA_beta = beta(~is_pia);
        pia_beta_invVAR = beta_invVAR(is_pia);
        PA_beta_invVAR = beta_invVAR(~is_pia);
        pia_Diam = avg_diam(is_pia);
        PA_Diam = avg_diam(~is_pia);

        %Assign to dynamic table: Pia
        col1 = types.hdmf_common.VectorData( ...
            'description', 'Pia Beta', ...
            'data', pia_beta);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'Pia Beta Inverse Variance', ...
            'data', pia_beta_invVAR);
        col3 = types.hdmf_common.VectorData( ...
            'description', 'Pia Average Diameter (um)', ...
            'data', pia_Diam);
        table_1I_Pia = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'Pia Beta', col1, ...
            'Pia Beta Inverse Variance', col2, ...
            'Pia Average Diameter',col3,...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_1I_Pia;
        nwb.analysis.set('PiaFluxDiameterModulation1J', table_1I_Pia);

        %Assign to dynamic table: Pia
        col1 = types.hdmf_common.VectorData( ...
            'description', 'PA Beta', ...
            'data', PA_beta);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'PA Beta Inverse Variance', ...
            'data', PA_beta_invVAR);
        col3 = types.hdmf_common.VectorData( ...
            'description', 'PA Average Diameter (um)', ...
            'data', PA_Diam);
        table_1I_PA = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'PA Beta', col1, ...
            'PA Beta Inverse Variance', col2, ...
            'PA Average Diameter',col3,...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_1I_PA;
        nwb.analysis.set('PAFluxDiameterModulation1J', table_1I_PA);
    end

    %% Figure 2C start
    if contains(subj_figs,' 2c')
        clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

        load(strcat(summary_data_path, "\Rui_2P\20230222 WT_PA_10\20230222PA10_5_rest_0um_allstats.mat"));
        dshallow = allstats.RadondEq_Outl;

        % load deep data
        load(strcat(summary_data_path, "\Rui_2P\20230222 WT_PA_10\20230222PA10_5_rest_380um_allstats.mat"));
        ddeep = allstats.RadondEq_Outl;

        %Create two separate with different starting times
        % Create TimeSeries
        % Must have all 3: starting_time, starting_time_rate, starting_time_unit ||
        % timestamps, timestamps_interval, timestamps_unit

        timeseries_shallow = nwb.acquisition.set('PAShallowTrace2C', types.core.TimeSeries('data', dshallow, 'description', 'DiameterTrace (um), comprises Fig2C with DeepTrace','data_unit','seconds',...
            'starting_time',double(0),'starting_time_rate',single(7.25),'starting_time_unit','Hz'));
        timeseries_deep = nwb.acquisition.set('PADeepTrace2C', types.core.TimeSeries('data', ddeep, 'description', 'DiameterTrace (um), comprises Fig2C with DeepTrace','data_unit','seconds',...
            'starting_time',double(0.069),'starting_time_rate',single(7.25),'starting_time_unit','Hz'));
        disp(['Processing2C',subj_session_id])
    end

    %% Figure 2D start
    if contains(subj_figs,' 2d')
        %Spectra->Dynamic table
        clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path S1 S2 S f phi phistd

        %Read values from excel table
        table = readtable(strcat(summary_data_path, '\IndividualFigures\Fig2\D\Fig2DSpectraData.csv'));
        %table = readtable('\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\IndividualFigures\Fig2\D\Fig2DSpectraData.csv');

        ShallowS = table.ShallowS;
        DeepS = table.DeepS;
        ShallowPVS = table.ShallowPVS;
        PAphase = table.PAPhase;
        PAphase2STD = table.PAPhase2SD;
        f = table.f;

        %Create dynamic table
        col1 = types.hdmf_common.VectorData( ...
            'description', 'Shallow PA Power (AU)', ...
            'data', ShallowS);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'Deep PA Power (AU)', ...
            'data', DeepS);
        col3 = types.hdmf_common.VectorData( ...
            'description', 'Shallow PV Power (AU)', ...
            'data',ShallowPVS);
        col4 = types.hdmf_common.VectorData( ...
            'description', 'PA Phase (rad)', ...
            'data',PAphase);
        col5 = types.hdmf_common.VectorData( ...
            'description', 'PA Phase 2std (rad)', ...
            'data',PAphase2STD);
        col6 = types.hdmf_common.VectorData( ...
            'description', 'Frequency (Hz)', ...
            'data', f);

        table_2D = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'Shallow PA Power', col1, ...
            'Deep PA Power', col2, ...
            'Shallow PV Power',col3,...
            'PA Phase',col4,...
            'PA Phase 2std',col5,...
            'Frequency',col6,...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_2D;

        nwb.analysis.set('PAPVSpectra2D', table_2D);
    end

    %% Figure 2E start
    if contains(subj_figs,' 2e')
        clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

        load(strcat(summary_data_path, "\Rui_2P\totampcomb_7_10_23.mat"));

        R2 = vertcat(totampcomb.ampR2);
        meand = vertcat(totampcomb.meand);
        amp = vertcat(totampcomb.amp);
        depth = vertcat(totampcomb.depth);
        isdeep = depth > 150;
        sum(isdeep)

        shallowamp = amp(~isdeep);
        deepamp = amp(isdeep);
        shallowd = meand(~isdeep);
        deepd = meand(isdeep);

        %Create dynamic table
        col1 = types.hdmf_common.VectorData( ...
            'description', 'Shallow Diameter (um)', ...
            'data', shallowd');
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'Shallow Modulation Amplitude (um)', ...
            'data', 2*shallowamp');
        col2_len = length(col2.data);
        col3 = types.hdmf_common.VectorData( ...
            'description', 'Deep Diameter (um)', ...
            'data', deepd');
        col3_len = length(col3.data);
        col4 = types.hdmf_common.VectorData( ...
            'description', 'Deep Modulation Amplitude (um)', ...
            'data',2*deepamp');
        col4_len = length(col4.data);
        table_2E = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'Shallow Diameter', col1, ...
            'Shallow Modulation Amplitude', col2, ...
            'Deep Diameter',col3,...
            'Deep Modulation Amplitude',col4,...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_2E;

        nwb.analysis.set('PAModulationAmplitude2E', table_2E);
    end

    %% Figure 2H start
    if contains(subj_figs,' 2h')
        clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

        load(strcat(summary_data_path, "\Rui_2P\Pipeline\7_8_23_Analysis\CombinedCorrmat.mat")); %Load combined results (Corrmat)
        load(strcat(summary_data_path, "\Rui_2P\Pipeline\7_8_23_Analysis\CombinedKFmat.mat")); %Load combined results (KFmat)

        %load("\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\Rui_2P\Pipeline\7_8_23_Analysis\CombinedCorrmat.mat"); %Load combined results (Corrmat)
        %load("\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\Rui_2P\Pipeline\7_8_23_Analysis\CombinedKFmat.mat"); %Load combined results (KFmat)

        KFtodel = ~logical(CombinedKFmat(:,6));
        CombinedKFmat(KFtodel,:) = [];

        wts = 1./(CombinedKFmat(:,3).^2);
        kvec = abs(CombinedKFmat(:,2));

        %Create dynamic table
        col1 = types.hdmf_common.VectorData( ...
            'description', 'Phase Grad (rad_mm)', ...
            'data', abs(kvec));
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'Weight 1/(rad/mm)^2', ...
            'data', wts);
        table_2H = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'Phase Grad', col1, ...
            'Weight', col2, ...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_2H;

        nwb.analysis.set('PAWeightVsK2H', table_2H);
    end

    %% Figure 2F start - uses 'dynamic table'
    if contains(subj_figs,' 2f')
        clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

        load(strcat(summary_data_path, "\Rui_2P\Pipeline\7_8_23_Analysis\CombinedCorrmat.mat")); %Load combined results (Corrmat)
        load(strcat(summary_data_path, "\Rui_2P\Pipeline\7_8_23_Analysis\CombinedKFmat.mat")); %Load combined results (KFmat)
        %load("\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\Rui_2P\Pipeline\7_8_23_Analysis\CombinedCorrmat.mat"); %Load combined results (Corrmat)
        %load("\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\Rui_2P\Pipeline\7_8_23_Analysis\CombinedKFmat.mat"); %Load combined results (KFmat)

        KFtodel = ~logical(CombinedKFmat(:,6));
        CombinedKFmat(KFtodel,:) = [];

        kvec = abs(CombinedKFmat(:,2));
        fvec = CombinedKFmat(:,1);

        %Create dynamic table
        col1 = types.hdmf_common.VectorData( ...
            'description', 'Phase Grad (rad/mm)', ...
            'data', kvec);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'Frequency (Hz)', ...
            'data', fvec);
        table_2F = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'Phase Grad', col1, ...
            'freq', col2, ...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_2F;

        nwb.analysis.set('PAFvsK2F', table_2F);
    end

    %% Figure 3C
    if contains(subj_figs,' 3c')

        %REMOVE HARD-CODING; USE summary_data_path
        load("\\dk-server.dk.ucsd.edu\jaduckwo\Rui_2P_DataBackup\JD_GC_Diam2P\6_13_23\7_24Analysis\roi10\resultsmat_sf3.mat");

        %Average time series (Ca and FWHM) with GCaMP axis flipped
        time = resultsmat.time;
        diam = resultsmat.diam;
        wave = resultsmat.wave;
        avgdiam = mean(diam,1)';
        avgwave = mean(wave,1)';
        timeseries_diam = nwb.acquisition.set('DiameterAverageTrace3C', types.core.TimeSeries('data', avgdiam, 'description', 'Diameter Trace (um)','data_unit','um',...
            'timestamps',time))
        timeseries_Ca = nwb.acquisition.set('CalciumAverageTrace3C', types.core.TimeSeries('data', avgwave, 'description', 'GCaMP8.1 Signal Trace (df/f)','data_unit','df/f',...
            'timestamps',time))
    end

    %% Figure 3D
     if contains(subj_figs,' 3d')

        table = readtable(strcat(summary_data_path, '\IndividualFigures\Fig3\D\CaDCrossCorrSummary.csv'));
        %table = readtable('Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig3\D\CaDCrossCorrSummary.csv');

        meandiam = table.meandiam;
        medcorr = table.mediancorr;
        medlag = table.medianlag;

        %Create dynamic table
        col1 = types.hdmf_common.VectorData( ...
            'description', 'Mean Diameter (um)', ...
            'data', meandiam);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'Ca-Diameter Peak Correlation', ...
            'data', medcorr);
        col3 = types.hdmf_common.VectorData( ...
            'description', 'Ca-Diameter Lag at Peak Correlation (s)', ...
            'data', medlag);
        table_3D = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'Diameter', col1, ...
            'Correlation', col2, ...
            'Lag',col3,...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        table_3D;

        nwb.analysis.set('CaDiameterCrossCorrelation3D', table_3D);
     end

     %% Figure 4B start - uses 'dynamic table'
     if contains(subj_figs,' 4b')

         %REMOVE HARD-CODING; USE summary_data_path
         load("\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\AllSegments\1_30_23_Results\CombinedResults\9_4_23\pvcomb_vesselfv_tapha_01_750um_8869ves.mat");

         %Get all magnitude k, freq, and R2 values
         kvec = abs(pvcomb(:,1));
         r2vec = pvcomb(:,2).^2;

         %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Phase Grad (rad/mm)', ...
             'data', kvec);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Phase Grad Fit R2', ...
             'data', r2vec);
         table_4B = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Phase Grad', col1, ...
             'R2', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );

         nwb.analysis.set('PiaRestR2vsK4B', table_4B);
     end

     %% Figure 4C start
     %DO NOT PUT UNITS IN "TYPES.HDMF_COMMON.DYNAMICTABLE", ONLY PUT UNITS
     %IN types.hdmf_common.VectorData
     if contains(subj_figs,' 4c')

         %REMOVE HARD-CODING; USE summary_data_path
         load("\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\AllSegments\1_30_23_Results\CombinedResults\9_4_23\pvcomb_vesselfv_tapha_01_750um_8869ves.mat");

         %Get all magnitude k, freq
         kvec = abs(pvcomb(:,1));
         fvec = pvcomb(:,3);

         %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Phase Grad (rad/mm)', ...
             'data', kvec);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Peak Vasomotor Frequency (Hz)', ...
             'data', fvec);
         table_4C = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Phase Grad', col1, ...
             'Frequency', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         table_4C;

         nwb.analysis.set('PiaRestfvsK4C', table_4C);
     end

     %% Figure 4D start
     if contains(subj_figs,' 4d')

         %REMOVE HARD-CODING; USE summary_data_path
         load("\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\AllSegments\PhaseAreaAnalysis\partition_k.mat");

         trial_var = partition_k.trial_var;

         avgk = trial_var(:,4);
         dk = trial_var(:,1);
         nantodel = isnan(avgk);
         avgk(nantodel) = [];
         dk(nantodel) = [];
         xpts = avgk(avgk < 0.6);
         ypts = dk(avgk < 0.6);

         %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Trial Average Phase Grad (rad/mm)', ...
             'data', xpts);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Trial Phase Grad Standard Deviation (rad/mm)', ...
             'data', ypts);
         table_4D = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Average Phase Grad', col1, ...
             'Phase Grad SD', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         table_4D;

         nwb.analysis.set('PiaRestDKvsK4D', table_4D);
     end

     %% Start Figure 4E
     if contains(subj_figs,' 4e')

        Coh = readtable(strcat(summary_data_path, '\IndividualFigures\Fig4\E\StimRegionCoherence.csv'));
        CohBins = readtable(strcat(summary_data_path, '\IndividualFigures\Fig4\E\StimRegionCoherence_BinEdges.csv'));

        %Coh = readtable('Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig4\E\StimRegionCoherence.csv');
        %CohBins = readtable('Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig4\E\StimRegionCoherence_BinEdges.csv');

        restC = Coh.restC;
        stimC = Coh.stimC;
        Edges = CohBins.binEdges;
        %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Resting State Magnitude Coherence', ...
             'data', restC);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Stimulated Magnitude Coherence', ...
             'data', stimC);
         table_4E_Coh = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Resting State Magnitude Coherence', col1, ...
             'Stimulated Magnitude Coherence', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PiaRestStimCoherence4E', table_4E_Coh);
          %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Histogram Bin Edges', ...
             'data', Edges);
         col1_len = length(col1.data);
         table_4E_BinEdges = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Bin Edges', col1, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PiaRestStimCoherenceEdges4E', table_4E_BinEdges);
     end

     %% Start Figure 4F
     if contains(subj_figs,' 4f')
         clearvars -except subj_session_id subj_figs primary_experiments_table subj nwb output_path

        load(strcat(summary_data_path, "\IndividualFigures\Fig4\F\kvplot.mat")); 
        load(strcat(summary_data_path, "\IndividualFigures\Fig4\F\knplot.mat")); 
        load(strcat(summary_data_path, "\IndividualFigures\Fig4\F\magkplot.mat")); 
        load(strcat(summary_data_path, "\IndividualFigures\Fig4\F\corrplot.mat")); 
        load(strcat(summary_data_path, "\IndividualFigures\Fig4\F\corrSEplot.mat")); 

         %load('Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig4\F\kvplot.mat');
         %load('Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig4\F\knplot.mat');
         %load('Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig4\F\magkplot.mat');
         %load('Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig4\F\corrplot.mat');
         %load('Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig4\F\corrSEplot.mat');
         
         %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Vessel Phase Gradient (rad/mm)', ...
             'data', kvplot);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Neuronal Phase Gradient (rad/mm)', ...
             'data', knplot);
         table_4F_kv_vs_kn = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Vessel Phase Gradient', col1, ...
             'Neuronal Phase Gradient', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PiaRestKvKn4F', table_4F_kv_vs_kn);
         %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Magnitude K; kv kn in quadrature (rad/mm)', ...
             'data', magktosave);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Connected Correlation M', ...
             'data', corr);
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Connected Correlation SE', ...
             'data', corrSE);
         table_4F_correlation = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Magnitude K', col1, ...
             'Connected Correlation', col2, ...
             'Connected Correlation SE',col3,...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PiaVesselNeuralKCorrelation4F', table_4F_correlation);
     end

     %% Start Figure 5A
     if contains(subj_figs,' 5a')

         %avoid hard-coding: 
         % addpath(genpath('\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\chronux_2_12'))
         % addpath(genpath('\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\chronux_2_12'))
         % addpath('\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\ExtractPGCode')

         stimstats1 = load(strcat(summary_data_path, "\Rui_2P\20221212 WT_PA_7\20221212PA7_PA2_stim_0um_allstats.mat")); 
         stimstats2 = load(strcat(summary_data_path, "\Rui_2P\20221212 WT_PA_7\20221212PA7_PA2_stim_390um_allstats.mat"));

         %stimstats1 = load("Y:\DataAnalysis\VesCorrPhase\Rui_2P\20221212 WT_PA_7\20221212PA7_PA2_stim_0um_allstats.mat");
         %stimstats2 = load("Y:\DataAnalysis\VesCorrPhase\Rui_2P\20221212 WT_PA_7\20221212PA7_PA2_stim_390um_allstats.mat");

         stimstats1 = stimstats1.allstats;
         stimstats2 = stimstats2.allstats;

         try
             rate = stimstats1.rate;
         catch
             rate = 7.25;
         end
         waves = stimstats1.RadondEq_Outl;
         waves = waves - mean(waves);
         waved = stimstats2.RadondEq_Outl;
         waved = waved - mean(waved);
         times = stimstats1.time;
         timed = stimstats2.time;
         if sum(times - timed) == 0
             timed = timed + (1/rate)/2;
         end

         %Interpolate each signal to get equal time points
         tqs = times(1):(1/(2*rate)):times(end);
         tqd = timed(1):(1/(2*rate)):timed(end);
         waves_q_tmp = interp1(times,waves,tqs);
         waved_q_tmp = interp1(timed,waved,tqd);

         %Delete first wave1 value so that both start at t=0.75.
         waves_q = waves_q_tmp(2:end);
         tqs = tqs(2:end);
         %Delete last wave1 value to make both time series the same duration
         waved_q = waved_q_tmp;
         waved_q(end) = [];
         tqd(end) = [];

         params.Fs = rate*2; %Interpolated rate is twice actual single depth rate
         params.pad = 2;
         params.fpass = [0 params.Fs/4]; %Hz, default is [0 Fs/2]
         params.err   = [2 .05];
         params.trialave = 0;
         T = stimstats1.time(end);
         BW = 0.02; %600s trial -> TBW =~ 12
         params.tapers = [round(T*BW),round(2*T*BW-1)]; %Time-BW product and number of tapers
         addpath(genpath('\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\chronux_2_12'))

         params.err = [2,0.05];
         [~,phi_stim,~,Ss_stim,Sd_stim,f_stim,~,phistd_stim,~] = coherencyc(waved_q,waves_q,params);


         figure; plot(f_stim,log10(Ss_stim),'b'); xlim([0 1]); xlabel('Frequency (Hz)','Interpreter','latex'); ylabel('Log10(Power)','Interpreter','latex');
         title('20221212WT7 PA2 stim','Interpreter','latex');
         % savefig('20221212WT7_PA2_stim_Shallow.fig');
         % print(gcf,'20221212WT7_PA2_stim_Shallow','-depsc2','-r0')
         figure; plot(f_stim,log10(Sd_stim),'b'); xlim([0 1]); xlabel('Frequency (Hz)','Interpreter','latex'); ylabel('Log10(Power)','Interpreter','latex');
         title('20221212WT7 PA2 stim','Interpreter','latex');
         figure
         plot(f_stim,phi_stim,'b'); xlim([0 1]); ylim([-pi pi]); hold on
         plot(f_stim,phi_stim + phistd_stim','Color',[0,0,1,0.2]);
         plot(f_stim,phi_stim - phistd_stim','Color',[0,0,1,0.2]); yline(0);
         xlim([0 0.5]); ylim([-pi/2 pi/2]);
         yticks([-pi/2 -pi/4 0 pi/4 pi/2]);
         yticklabels({'-$\pi$/2', '-$\pi$/4','0', '-$\pi$/4', '$\pi$/2'});
         set(gca,'TickLabelInterpreter','latex');

        %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Frequency (Hz)', ...
             'data', f_stim');
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Phase (rad)', ...
             'data', phi_stim);
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Phase SD (rad)', ...
             'data', phistd_stim');
         table_5A_phase = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Frequency', col1, ...
             'Phase', col2, ...
             'Phase SD',col3,...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PAStimPhase5A', table_5A_phase);


         % calc and plot resid spectrum
         stimstats1 = load(strcat(summary_data_path, "\Rui_2P\20221212 WT_PA_7\20221212PA7_PA2_stim_0um_allstats.mat"));

         %stimstats1 = load("Y:\DataAnalysis\VesCorrPhase\Rui_2P\20221212 WT_PA_7\20221212PA7_PA2_stim_0um_allstats.mat");

         stimstats1 = stimstats1.allstats;
         rate = 7.25; %Hz
         waves = stimstats1.RadondEq_Outl;
         waves = waves - mean(waves);
         params.Fs = rate; %Interpolated rate is twice actual single depth rate
         params.pad = 2;
         params.fpass = [0 params.Fs/4]; %Hz, default is [0 Fs/2]
         params.err   = [2 .05];
         params.trialave = 0;
         T = stimstats1.time(end);
         BW = 0.02; %600s trial -> TBW =~ 12
         params.tapers = [round(T*BW),round(2*T*BW-1)]; %Time-BW product and number of tapers
         addpath(genpath('\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\chronux_2_12'))
         addpath('\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\ExtractPGCode')

         [data_nolines,f,Sresid,Stot,Amps,fmax] = ResidSpec(waves,params);
         A = abs(cell2mat(Amps)).^2;
         A = A./(2*BW); %Divide by full bandwidth to get line height
         xlocs = f(struct2array(fmax))';
         ylocs = Sresid(struct2array(fmax));
         U = zeros(length(xlocs),1);
         V = A;
         figure; plot(f,Stot,'k'); hold on; plot(f,Sresid,'b'); xlim([0 0.5]);
         quiver(xlocs,ylocs,U,V,'off','LineWidth',2,'ShowArrowHead','off')
         ax = gca;
         ax.TickLabelInterpreter = 'latex';
         set(ax,'YScale','log');
         ylim([0.01,10]);
         ylabel('log10(Power)','Interpreter','latex'); xlabel('Freq (Hz)','Interpreter','latex');

         %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Frequency (Hz)', ...
             'data', f');
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Shallow PA Residual Power', ...
             'data', Sresid);
         table_5A_spectrum = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Frequency', col1, ...
             'Phase', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PAStimSpectrum5A', table_5A_spectrum);
         %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Extracted Freqs (Hz)', ...
             'data', xlocs);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Shallow PA Residual Power at Extracted Freqs', ...
             'data', ylocs);
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Shallow PA Extracted Power at Extracted Freqs', ...
             'data', V);
         table_5A_extractedpower = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Extracted Frequency', col1, ...
             'Residual Power', col2, ...
             'Extracted Power',col3,...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PAStimExtractedPower5A', table_5A_extractedpower);
     end

     %% Start Figure 5B
     if contains(subj_figs,' 5b')

         KM1 = load(strcat(summary_data_path, "\Rui_2P\Pipeline\8_4_StimAnalysis\20221212PA7_Corr_KF_struct_stim.mat")); 
         KM2 = load(strcat(summary_data_path, "\Rui_2P\Pipeline\8_4_StimAnalysis\20221208PA5_Corr_KF_struct_stim.mat"));
         
         names1 = cell2mat({KM1.Corr_KF_struct.phi_struct.PA}); KM1 = KM1.Corr_KF_struct.KFmat;
         names2 = cell2mat({KM2.Corr_KF_struct.phi_struct.PA}); KM2 = KM2.Corr_KF_struct.KFmat;

         % cd('\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\Rui_2P\Pipeline\8_4_StimAnalysis')
         %KM1 = load("20221212PA7_Corr_KF_struct_stim.mat"); names1 = cell2mat({KM1.Corr_KF_struct.phi_struct.PA}); KM1 = KM1.Corr_KF_struct.KFmat;
         %KM2 = load('20221208PA5_Corr_KF_struct_stim.mat'); names2 = cell2mat({KM2.Corr_KF_struct.phi_struct.PA}); KM2 = KM2.Corr_KF_struct.KFmat;

         CombinedKFmat = [KM1;KM2];
         names = [names1,names2];

         kplot = CombinedKFmat(:,2);
         ispos = kplot > 0;
         isneg = kplot < 0;
         k_enter = abs(kplot(ispos));
         k_exit = abs(kplot(isneg));
         figure;
         h1 = histogram(abs(kplot(ispos)),'FaceColor','r','BinWidth',0.25); hold on
         histogram(abs(kplot(isneg)),'FaceColor','b','BinWidth',0.25);
         BinEdges = h1.BinEdges;

         %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'PA Stim Phase Gradient (rad/mm)', ...
             'data', kplot);
         col1_len = length(col1.data);
         table_5B_PhaseGrad = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'PA Stim Phase Gradient', col1, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PAStimPhaseGradient5B', table_5B_PhaseGrad);
         %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Histogram Bin Edges', ...
             'data', BinEdges);
         col1_len = length(col1.data);
         table_5B_BinEdges = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Bin Edges', col1, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PAStimPhaseGradientBinEdges5B', table_5B_BinEdges);
     end

     % ########################################################
     % can we remove this 5C code?
     % ########################################################
     %% Start Figure 5C
%      if contains(subj_figs,' 5c')
%          cd('Y:\DataAnalysis\VesCorrPhase\AllSegments\StimRegCoh\1_30_23_Analysis\StimRegPhase');
%          files = dir('*StimRegPhase.mat');
% 
%          %Combine results from all animals
%          for i = 1:length(files)
%              load(files(i).name);
%              if i == 1
%                  k_fs = SRP.k_fs;
%                  k_fs2 = SRP.k_fs2;
%                  f_fs = SRP.f_fs;
%                  f_fs2 = SRP.f_fs2;
%                  R_fs = SRP.R_fs;
%                  R_fs2 = SRP.R_fs2;
%                  lengths = SRP.lengths;
%                  segs = SRP.segs;
%              else
%                  k_fs = [k_fs;SRP.k_fs];
%                  k_fs2 = [k_fs2;SRP.k_fs2];
%                  f_fs = [f_fs;SRP.f_fs];
%                  f_fs2 = [f_fs2;SRP.f_fs2];
%                  R_fs = [R_fs;SRP.R_fs];
%                  R_fs2 = [R_fs2;SRP.R_fs2];
%                  lengths = [lengths;SRP.lengths];
%                  segs = [segs;SRP.segs];
%              end
%              i;
%          end
% 
%          lengthtodel = lengths < 0.75;
%          nantodel = isnan(k_fs);
%          todel = or(lengthtodel,nantodel);
% 
%          k_fs(todel) = [];
%          k_fs2(todel) = [];
%          f_fs(todel) = [];
%          f_fs2(todel) = [];
%          R_fs(todel) = [];
%          R_fs2(todel) = [];
%          lengths(todel) = [];
%          segs(todel) = [];
% 
%          lengthsfs = lengths;
%          segsfs = segs;
%          lengthsfs2 = lengths;
%          segsfs2 = segs;
% 
%          %Calculate t-test statistic
%          alpha = 0.01; %Set significance level
%          p = 1-alpha;
%          p2 = 1-alpha/2;
%          t_mat = zeros(length(R_fs),1);
%          for i = 1:length(R_fs)
%              r = R_fs(i);
%              n = segsfs(i);
%              df = n-2;
%              if df > 0
%                  SE = sqrt((1-r^2)/(n-2));
%                  t = r/SE;
%                  tcrit = icdf('T',p2,df);
%                  t_mat(i) = t;
%                  t_mat(i,2) = tcrit;
%              else
%                  t_mat(i,1) = NaN;
%                  t_mat(i,2) = NaN;
%              end
%          end
%          t_todel = zeros(size(t_mat,1),1);
%          for i=1:length(t_todel)
%              if abs(t_mat(i,1))<t_mat(i,2) %If t<tcrit
%                  t_todel(i) = 1;
%              end
%          end
%          t_todel = logical(t_todel);
%          k_fs(t_todel) = [];
%          f_fs(t_todel) = [];
%          R_fs(t_todel) = [];
%          lengthsfs(t_todel) = [];
%          segsfs(t_todel) = [];
% 
%          %Here we consider only stim frequencies less than 0.2 Hz, the intrinsic
%          %frequency range of these arteries
%          f_lessthan_2Hz = f_fs < 0.2;
%          %Get all magnitude k, freq, and R^2 values
%          kplot = abs(k_fs(f_lessthan_2Hz));
%          fplot = f_fs(f_lessthan_2Hz);
%          wts = R_fs(f_lessthan_2Hz).^2;
% 
%          %Create dynamic table
%          col1 = types.hdmf_common.VectorData( ...
%              'description', 'Pia Stim Phase Gradient (rad/mm)', ...
%              'data', kplot);
%          col1_len = length(col1.data);
%          col2 = types.hdmf_common.VectorData( ...
%              'description', 'Pia Stim Frequency (Hz)', ...
%              'data', fplot);
%          col3 = types.hdmf_common.VectorData( ...
%              'description', 'Pia Stim Weights, Phase Gradient R2', ...
%              'data', wts);
%          table_5C_FvsK = types.hdmf_common.DynamicTable( ...
%              'description', 'analysis table', ...
%              'Phase Gradient (rad/mm)', col1, ...
%              'Frequency (Hz)', col2, ...
%              'Weights, R2',col3,...
%              'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
%              );
%          nwb.analysis.set('PiaStimFvsK', table_5C_FvsK);
%      end

     %% Start Figure 5C
     if contains(subj_figs,' 5c')

         %REMOVE HARD-CODING; USE summary_data_path
         cd('Y:\DataAnalysis\VesCorrPhase\AllSegments\StimRegCoh\1_30_23_Analysis\StimRegPhase');
         files = dir('*StimRegPhase.mat');

         %Combine results from all animals
         for i = 1:length(files)
             load(files(i).name);
             if i == 1
                 k_fs = SRP.k_fs;
                 k_fs2 = SRP.k_fs2;
                 f_fs = SRP.f_fs;
                 f_fs2 = SRP.f_fs2;
                 R_fs = SRP.R_fs;
                 R_fs2 = SRP.R_fs2;
                 lengths = SRP.lengths;
                 segs = SRP.segs;
             else
                 k_fs = [k_fs;SRP.k_fs];
                 k_fs2 = [k_fs2;SRP.k_fs2];
                 f_fs = [f_fs;SRP.f_fs];
                 f_fs2 = [f_fs2;SRP.f_fs2];
                 R_fs = [R_fs;SRP.R_fs];
                 R_fs2 = [R_fs2;SRP.R_fs2];
                 lengths = [lengths;SRP.lengths];
                 segs = [segs;SRP.segs];
             end
             i;
         end

         lengthtodel = lengths < 0.75;
         nantodel = isnan(k_fs);
         todel = or(lengthtodel,nantodel);

         k_fs(todel) = [];
         k_fs2(todel) = [];
         f_fs(todel) = [];
         f_fs2(todel) = [];
         R_fs(todel) = [];
         R_fs2(todel) = [];
         lengths(todel) = [];
         segs(todel) = [];

         lengthsfs = lengths;
         segsfs = segs;
         lengthsfs2 = lengths;
         segsfs2 = segs;

         %Calculate t-test statistic
         alpha = 0.01; %Set significance level
         p = 1-alpha;
         p2 = 1-alpha/2;
         t_mat = zeros(length(R_fs),1);
         for i = 1:length(R_fs)
             r = R_fs(i);
             n = segsfs(i);
             df = n-2;
             if df > 0
                 SE = sqrt((1-r^2)/(n-2));
                 t = r/SE;
                 tcrit = icdf('T',p2,df);
                 t_mat(i) = t;
                 t_mat(i,2) = tcrit;
             else
                 t_mat(i,1) = NaN;
                 t_mat(i,2) = NaN;
             end
         end
         t_todel = zeros(size(t_mat,1),1);
         for i=1:length(t_todel)
             if abs(t_mat(i,1))<t_mat(i,2) %If t<tcrit
                 t_todel(i) = 1;
             end
         end
         t_todel = logical(t_todel);
         k_fs(t_todel) = [];
         f_fs(t_todel) = [];
         R_fs(t_todel) = [];
         lengthsfs(t_todel) = [];
         segsfs(t_todel) = [];

         %Here we consider only stim frequencies less than 0.2 Hz, the intrinsic
         %frequency range of these arteries
         f_lessthan_2Hz = f_fs < 0.2;
         %Get all magnitude k, freq, and R^2 values
         kplot = abs(k_fs(f_lessthan_2Hz));
         fplot = f_fs(f_lessthan_2Hz);
         wts = R_fs(f_lessthan_2Hz).^2;

         %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Pia Stim Phase Gradient (rad/mm)', ...
             'data', kplot);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Pia Stim Frequency (Hz)', ...
             'data', fplot);
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Pia Stim Weights, Phase Gradient R2', ...
             'data', wts);
         table_5C_FvsK = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Phase Gradient ', col1, ...
             'Frequency', col2, ...
             'Weights, R2',col3,...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PiaStimFvsK5C', table_5C_FvsK);

     end

     %% Figure 6B
     % ref: https://www.mathworks.com/matlabcentral/answers/383567-how-to-extract-x-y-data-values-from-matlab-figure
     if contains(subj_figs,' 6b')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         openfig(strcat(summary_data_path, "\IndividualFigures\Fig6\B\D_ves_rest_meanspec_0_02.fig")); 

         %openfig("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig6\B\D_ves_rest_meanspec_0_02.fig");

         h = findobj(gca,'Type','line')
         x=get(h,'Xdata');
         y=get(h,'Ydata');
         xsave = flip(x,1);
         ysave = flip(y,1);
         %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Frequency (Hz)', ...
             'data', xsave{1});
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Mode 1 Power', ...
             'data', ysave{1});
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Mode 2 Power', ...
             'data', ysave{2});
         col4 = types.hdmf_common.VectorData( ...
             'description', 'Mode 3 Power', ...
             'data', ysave{3});
         col5 = types.hdmf_common.VectorData( ...
             'description', 'Mode 4 Power', ...
             'data', ysave{4});
         col6 = types.hdmf_common.VectorData( ...
             'description', 'Mode 5 Power', ...
             'data', ysave{5});
         col7 = types.hdmf_common.VectorData( ...
             'description', 'Mode 6 Power', ...
             'data', ysave{6});
         col8 = types.hdmf_common.VectorData( ...
             'description', 'Mode 7 Power', ...
             'data', ysave{7});
         col9 = types.hdmf_common.VectorData( ...
             'description', 'Mode 8 Power', ...
             'data', ysave{8});
         col10 = types.hdmf_common.VectorData( ...
             'description', 'Mode 9 Power', ...
             'data', ysave{9});
         col11 = types.hdmf_common.VectorData( ...
             'description', 'Mode 10 Power', ...
             'data', ysave{10});
         table_6B_VesselSpec = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Frequency (Hz)', col1, ...
             'Mode 1 Power', col2, ...
             'Mode 2 Power',col3,...
             'Mode 3 Power',col4,...
             'Mode 4 Power',col5,...
             'Mode 5 Power',col6,...
             'Mode 6 Power',col7,...
             'Mode 7 Power',col8,...
             'Mode 8 Power',col9,...
             'Mode 9 Power',col10,...
             'Mode 10 Power',col11,...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('VesselGRAFTModeSpectra6B', table_6B_VesselSpec);
         close all
     end

     %% Figure 6C
     % ref: https://www.mathworks.com/matlabcentral/answers/383567-how-to-extract-x-y-data-values-from-matlab-figure
     if contains(subj_figs,' 6c')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         %REMOVE HARD-CODING; USE summary_data_path
         openfig("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig6\C\D_neu_rest_meanspec_0_02.fig");

         h = findobj(gca,'Type','line')
         x=get(h,'Xdata');
         y=get(h,'Ydata');
         xsave = flip(x,1);
         ysave = flip(y,1);
         %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Frequency (Hz)', ...
             'data', xsave{1});
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Mode 1 Power', ...
             'data', ysave{1});
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Mode 2 Power', ...
             'data', ysave{2});
         col4 = types.hdmf_common.VectorData( ...
             'description', 'Mode 3 Power', ...
             'data', ysave{3});
         col5 = types.hdmf_common.VectorData( ...
             'description', 'Mode 4 Power', ...
             'data', ysave{4});
         col6 = types.hdmf_common.VectorData( ...
             'description', 'Mode 5 Power', ...
             'data', ysave{5});
         col7 = types.hdmf_common.VectorData( ...
             'description', 'Mode 6 Power', ...
             'data', ysave{6});
         col8 = types.hdmf_common.VectorData( ...
             'description', 'Mode 7 Power', ...
             'data', ysave{7});
         col9 = types.hdmf_common.VectorData( ...
             'description', 'Mode 8 Power', ...
             'data', ysave{8});
         col10 = types.hdmf_common.VectorData( ...
             'description', 'Mode 9 Power', ...
             'data', ysave{9});
         col11 = types.hdmf_common.VectorData( ...
             'description', 'Mode 10 Power', ...
             'data', ysave{10});
         table_6C_NeuralSpec = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Frequency (Hz)', col1, ...
             'Mode 1 Power', col2, ...
             'Mode 2 Power',col3,...
             'Mode 3 Power',col4,...
             'Mode 4 Power',col5,...
             'Mode 5 Power',col6,...
             'Mode 6 Power',col7,...
             'Mode 7 Power',col8,...
             'Mode 8 Power',col9,...
             'Mode 9 Power',col10,...
             'Mode 10 Power',col11,...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('NeuronsGRAFTModeSpectra6C', table_6C_NeuralSpec);
         close all
     end

     %% Figure 6D
     % in figure_save->fig
     % ref: https://www.mathworks.com/help/images/ref/getimage.html
     if contains(subj_figs,' 6d')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

        %REMOVE HARD-CODING; USE summary_data_path
        openfig("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig6\D\Corr_spatial_rest.fig")

        caxis([-0.82 0.82]);
        I = getimage;
        %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 1 Neu Mode 1-10', ...
             'data', I(:,1));
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 2 Neu Mode 1-10', ...
             'data', I(:,2));
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 3 Neu Mode 1-10', ...
             'data', I(:,3));
         col4 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 4 Neu Mode 1-10', ...
             'data', I(:,4));
         col5 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 5 Neu Mode 1-10', ...
             'data', I(:,5));
         col6 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 6 Neu Mode 1-10', ...
             'data', I(:,6));
         col7 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 7 Neu Mode 1-10', ...
             'data', I(:,7));
         col8 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 8 Neu Mode 1-10', ...
             'data', I(:,8));
         col9 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 9 Neu Mode 1-10', ...
             'data', I(:,9));
         col10 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 10 Neu Mode 1-10', ...
             'data', I(:,10));
         table_6D_SpatialCorrMat = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Pial Mode 1 Neu Mode 1-10', col1, ...
             'Pial Mode 2 Neu Mode 1-10', col2, ...
             'Pial Mode 3 Neu Mode 1-10',col3,...
             'Pial Mode 4 Neu Mode 1-10',col4,...
             'Pial Mode 5 Neu Mode 1-10',col5,...
             'Pial Mode 6 Neu Mode 1-10',col6,...
             'Pial Mode 7 Neu Mode 1-10',col7,...
             'Pial Mode 8 Neu Mode 1-10',col8,...
             'Pial Mode 9 Neu Mode 1-10',col9,...
             'Pial Mode 10 Neu Mode 1-10',col10,...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('GRaFTSpatialCorrMat6D', table_6D_SpatialCorrMat);
         close all
     end
     %% Figure 6E
% in figure_save->fig
% ref: https://www.mathworks.com/help/images/ref/getimage.html
     if contains(subj_figs,' 6e')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

        %REMOVE HARD-CODING; USE summary_data_path
        openfig("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig6\E\Coher_spec_rest.fig")
        caxis([0 0.62]);
        I = getimage;
        %Create dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 1 Neu Mode 1-10', ...
             'data', I(:,1));
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 2 Neu Mode 1-10', ...
             'data', I(:,2));
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 3 Neu Mode 1-10', ...
             'data', I(:,3));
         col4 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 4 Neu Mode 1-10', ...
             'data', I(:,4));
         col5 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 5 Neu Mode 1-10', ...
             'data', I(:,5));
         col6 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 6 Neu Mode 1-10', ...
             'data', I(:,6));
         col7 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 7 Neu Mode 1-10', ...
             'data', I(:,7));
         col8 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 8 Neu Mode 1-10', ...
             'data', I(:,8));
         col9 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 9 Neu Mode 1-10', ...
             'data', I(:,9));
         col10 = types.hdmf_common.VectorData( ...
             'description', 'Pial Mode 10 Neu Mode 1-10', ...
             'data', I(:,10));
         table_6E_SpecCohMat = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Pial Mode 1 Neu Mode 1-10', col1, ...
             'Pial Mode 2 Neu Mode 1-10', col2, ...
             'Pial Mode 3 Neu Mode 1-10',col3,...
             'Pial Mode 4 Neu Mode 1-10',col4,...
             'Pial Mode 5 Neu Mode 1-10',col5,...
             'Pial Mode 6 Neu Mode 1-10',col6,...
             'Pial Mode 7 Neu Mode 1-10',col7,...
             'Pial Mode 8 Neu Mode 1-10',col8,...
             'Pial Mode 9 Neu Mode 1-10',col9,...
             'Pial Mode 10 Neu Mode 1-10',col10,...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('GRaFTSpecCohMat6E', table_6E_SpecCohMat);
         close all
     end

%% Figure 6F
%Xinyue will send file
if contains(subj_figs,' 6f')
    clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

    load("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\Fig6\F\rest_n2v.mat")
    label_x={'F7','F2-2','F2','M4','F3','M2','F9','F10', 'M3'}';

    train = h1{1,1};
    test = h1{2,1};
    col1 = types.hdmf_common.VectorData( ...
        'description', label_x{1}, ...
        'data', train(:,1));
    col1_len = length(col1.data);
    col2 = types.hdmf_common.VectorData( ...
        'description', label_x{2}, ...
        'data', train(:,2));
    col3 = types.hdmf_common.VectorData( ...
        'description', label_x{3}, ...
        'data', train(:,3));
    col4 = types.hdmf_common.VectorData( ...
        'description', label_x{4}, ...
        'data', train(:,4));
    col5 = types.hdmf_common.VectorData( ...
        'description', label_x{5}, ...
        'data', train(:,5));
    col6 = types.hdmf_common.VectorData( ...
        'description', label_x{6}, ...
        'data', train(:,6));
    col7 = types.hdmf_common.VectorData( ...
        'description', label_x{7}, ...
        'data', train(:,7));
    col8 = types.hdmf_common.VectorData( ...
        'description', label_x{8}, ...
        'data', train(:,8));
    col9 = types.hdmf_common.VectorData( ...
        'description', label_x{9}, ...
        'data', train(:,9));

    table_6F_train = types.hdmf_common.DynamicTable( ...
        'description', 'analysis table', ...
        label_x{1}, col1, ...
        label_x{2}, col2, ...
        label_x{3}, col3, ...
        label_x{4}, col4, ...
        label_x{5}, col5, ...
        label_x{6}, col6, ...
        label_x{7}, col7, ...
        label_x{8}, col8, ...
        label_x{9}, col9, ...
        'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
        );
    nwb.analysis.set('GRaFTRsquareRestVesselsFromNeuronsTrain6F', table_6F_train);

    %TESTING DATA
    col1 = types.hdmf_common.VectorData( ...
        'description', label_x{1}, ...
        'data', test(:,1));
    col1_len = length(col1.data);
    col2 = types.hdmf_common.VectorData( ...
        'description', label_x{2}, ...
        'data', test(:,2));
    col3 = types.hdmf_common.VectorData( ...
        'description', label_x{3}, ...
        'data', test(:,3));
    col4 = types.hdmf_common.VectorData( ...
        'description', label_x{4}, ...
        'data', test(:,4));
    col5 = types.hdmf_common.VectorData( ...
        'description', label_x{5}, ...
        'data', test(:,5));
    col6 = types.hdmf_common.VectorData( ...
        'description', label_x{6}, ...
        'data', test(:,6));
    col7 = types.hdmf_common.VectorData( ...
        'description', label_x{7}, ...
        'data', test(:,7));
    col8 = types.hdmf_common.VectorData( ...
        'description', label_x{8}, ...
        'data', test(:,8));
    col9 = types.hdmf_common.VectorData( ...
        'description', label_x{9}, ...
        'data', test(:,9));

    table_6F_test = types.hdmf_common.DynamicTable( ...
        'description', 'analysis table', ...
        label_x{1}, col1, ...
        label_x{2}, col2, ...
        label_x{3}, col3, ...
        label_x{4}, col4, ...
        label_x{5}, col5, ...
        label_x{6}, col6, ...
        label_x{7}, col7, ...
        label_x{8}, col8, ...
        label_x{9}, col9, ...
        'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
        );
    nwb.analysis.set('GRaFTRsquareRestVesselsFromNeuronsTest6F', table_6F_test);
end
     %% Figure S2A
if contains(subj_figs,' S2a')
    clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

    table = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS2\A\FigS2A_allcorr.csv");
    corr = table.AllCorr;
    table = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS2\A\FigS2A_Lag.csv");
    Lags = table.Filt_Lags;
    col1 = types.hdmf_common.VectorData( ...
        'description', 'Flux-Diameter Corr', ...
        'data', corr);
    col1_len = length(col1.data);
    table_S2A_Corr = types.hdmf_common.DynamicTable( ...
        'description', 'analysis table', ...
        'Flux-Diameter Corr', col1, ...
        'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
        );
    nwb.analysis.set('FluxDiamCorrRestS2A', table_S2A_Corr);

    col1 = types.hdmf_common.VectorData( ...
        'description', 'Flux-Diameter lag (s)', ...
        'data', Lags);
    col1_len = length(col1.data);
    table_S2A_Lag = types.hdmf_common.DynamicTable( ...
        'description', 'analysis table', ...
        'Flux-Diameter Lag (s)', col1, ...
        'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
        );
    nwb.analysis.set('FluxDiamLagRestS2A', table_S2A_Lag);
         close all;
end
     %% S2B
     if contains(subj_figs,' S2b')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         openfig("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS2\DKLab_TBRLBB_dd_vs_d_fit_med_PA_data.fig");
         h = findobj(gca,'Type','scatter');
         x=get(h,'Xdata');
         y=get(h,'Ydata');

         col1 = types.hdmf_common.VectorData( ...
             'description', 'PA Average Diameter (um)', ...
             'data', x);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'PA Change in Diameter (um)', ...
             'data', y);
         table_S2B_Dd = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'PA Average Diameter (um)', col1, ...
             'PA Change in Diameter (um)', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PARawChangeinDiameterS2B', table_S2B_Dd);
         close all;
     end
     %% S2C
     if contains(subj_figs,' S2c')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         openfig("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS2\DKLab_TBRLBB_dd_vs_d_fit_med_Pia_data.fig");
         h = findobj(gca,'Type','scatter');
         x=get(h,'Xdata');
         y=get(h,'Ydata');

         col1 = types.hdmf_common.VectorData( ...
             'description', 'Pia Average Diameter (um)', ...
             'data', x);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Pia Change in Diameter (um)', ...
             'data', y);
         table_S2C_Dd = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Pia Average Diameter (um)', col1, ...
             'Pia Change in Diameter (um)', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PiaRawChangeinDiameterS2C', table_S2C_Dd);
         close all;
     end

     %% S2D
     if contains(subj_figs,' S2d')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         openfig("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS2\DKLab_TBRLBB_dq_vs_d_fit_med_PA_data.fig");
         h = findobj(gca,'Type','scatter');
         x=get(h,'Xdata');
         y=get(h,'Ydata');

         col1 = types.hdmf_common.VectorData( ...
             'description', 'PA Average Diameter (um)', ...
             'data', x);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'PA Change in Flux (Hz)', ...
             'data', y);
         table_S2D_Dq = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'PA Average Diameter (um)', col1, ...
             'PA Change in Flux (Hz)', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );

         nwb.analysis.set('PARawChangeinFluxS2D', table_S2D_Dq);
                  close all;
     end
     %% S2E
     if contains(subj_figs,' S2e')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         openfig("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS2\DKLab_TBRLBB_dq_vs_d_fit_med_Pia_data.fig");
         h = findobj(gca,'Type','scatter');
         x=get(h,'Xdata');
         y=get(h,'Ydata');

         col1 = types.hdmf_common.VectorData( ...
             'description', 'Pia Average Diameter (um)', ...
             'data', x);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Pia Change in Flux (Hz)', ...
             'data', y);
         table_S2E_Dq = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Pia Average Diameter (um)', col1, ...
             'Pia Change in Flux (Hz)', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );

         nwb.analysis.set('PiaRawChangeinFluxS2E', table_S2E_Dq);
                  close all;
     end
     %% S2F
     if contains(subj_figs,' S2f')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         openfig("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS2\DKLab_TBRLBB_dq_vs_q_fit_med_PA_data.fig");
         h = findobj(gca,'Type','scatter');
         x=get(h,'Xdata');
         y=get(h,'Ydata');

         col1 = types.hdmf_common.VectorData( ...
             'description', 'PA Average Flux (Hz)', ...
             'data', x);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'PA Change in Flux (Hz)', ...
             'data', y);
         table_S2F_Dq = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'PA Average Flux (Hz)', col1, ...
             'PA Change in Flux (Hz)', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );

         nwb.analysis.set('PARawChangeinFluxVsFluxS2F', table_S2F_Dq);
                  close all;
     end

     %% S2G
     if contains(subj_figs,' S2g')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         openfig("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS2\DKLab_TBRLBB_dq_vs_q_fit_med_Pia_data.fig");
         h = findobj(gca,'Type','scatter');
         x=get(h,'Xdata');
         y=get(h,'Ydata');

         col1 = types.hdmf_common.VectorData( ...
             'description', 'Pia Average Flux (Hz)', ...
             'data', x);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Pia Change in Flux (Hz)', ...
             'data', y);
         table_S2G_Dq = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Pia Average Flux (Hz)', col1, ...
             'Pia Change in Flux (Hz)', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );

         nwb.analysis.set('PiaRawChangeinFluxVsFluxS2G', table_S2G_Dq);
                  close all;
     end
     %% S2H
         if contains(subj_figs,' S2h')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         openfig("C:\Users\duckw\Dropbox\Thomas_SpaceTime_DropBox\ 1-D Pial Oscilations MS\Xiang\Heart_rate_frequency\DKLab_TBRLBB_r_rms_modulation_in_5_to_12_Hz_r_data.fig");
         h = findobj(gca,'Type','scatter');
         x=2.*get(h(1),'Xdata');
         y=get(h(1),'Ydata');

         col1 = types.hdmf_common.VectorData( ...
             'description', 'PA Average diameter (um)', ...
             'data', x);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'PA Norm RMS diameter change', ...
             'data', y);
         table_S2H_RMSd_PA = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'PA Average diameter (um)', col1, ...
             'PA Norm RMS diameter change', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );

         nwb.analysis.set('PAHeartRateRMSDiameterChangeS2H', table_S2H_RMSd_PA);

         clearvars x y
         h = findobj(gca,'Type','scatter');
         x=2.*get(h(2),'Xdata');
         y=get(h(2),'Ydata');

         col1 = types.hdmf_common.VectorData( ...
             'description', 'Pia Average diameter (um)', ...
             'data', x);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Pia Norm RMS diameter change', ...
             'data', y);
         table_S2H_RMSd_Pia = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Pia Average diameter (um)', col1, ...
             'Pia Norm RMS diameter change', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );

         nwb.analysis.set('PiaHeartRateRMSDiameterChangeS2H', table_S2H_RMSd_Pia);
         close all;
         end

     %% Figure S3A Start
     if contains(subj_figs,' S3a')
         traces_tbl = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS3\A\DiameterModExample_Traces_S3A.csv");
         edges_tbl = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS3\A\DiameterModExample_Edges_S3A.csv");
         phase_trace = traces_tbl.phase_trace;
         diam_trace = traces_tbl.diam_trace;
         phase_edges = edges_tbl.phase_edge;
         diam_edges = edges_tbl.diam_edge;
         %     figure; histogram2(phase_trace,diam_trace,phase_edges,diam_edges,'DisplayStyle','tile');

         %Assign to dynamic table: Pia
         col1 = types.hdmf_common.VectorData( ...
             'description', 'phase trace (rad)', ...
             'data', phase_trace);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'diam trace (um)', ...
             'data', diam_trace);
         table_S3A_Traces = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'phase trace', col1, ...
             'diam trace', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('DiameterModulationJointDistributionTracesS3A', table_S3A_Traces);

         %Assign to dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'phase bin edges (rad)', ...
             'data', phase_edges);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'diam bin edges (um)', ...
             'data', diam_edges);
         table_S3A_BinEdges = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'phase bin edges', col1, ...
             'diam bin edges', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('DiameterModulationJointDistributionEdgesS3A', table_S3A_BinEdges);
     end

     %% Figure S3B Start
     if contains(subj_figs,' S3b')
         traces_tbl = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS3\B\FluxModExample_Traces_S3B.csv");
         edges_tbl = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS3\B\FluxModExample_Edges_S3B.csv");
         phase_trace = traces_tbl.phase_trace;
         flux_trace = traces_tbl.flux_trace;
         phase_edges = edges_tbl.phase_edge;
         flux_edges = edges_tbl.flux_edge;
         %     figure; histogram2(phase_trace,diam_trace,phase_edges,diam_edges,'DisplayStyle','tile');

         %Assign to dynamic table: Pia
         col1 = types.hdmf_common.VectorData( ...
             'description', 'phase trace (rad)', ...
             'data', phase_trace);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'flux trace (Hz)', ...
             'data', flux_trace);
         table_S3B_Traces = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'phase trace', col1, ...
             'flux trace', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('FluxModulationJointDistributionTracesS3B', table_S3B_Traces);

         %Assign to dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'phase bin edges (rad)', ...
             'data', phase_edges);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'flux bin edges (um)', ...
             'data', flux_edges);
         table_S3B_BinEdges = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'phase bin edges', col1, ...
             'flux bin edges', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('FluxModulationJointDistributionEdgesS3A', table_S3B_BinEdges);
     end


     %% Figure S3C Start
     if contains(subj_figs,' S3c')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path
         traces_tbl = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS3\C\DiameterFluxExample_Traces_S3C.csv");
         edges_tbl = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS3\C\DiameterFluxExample_Edges_S3C.csv");
         diam_trace = traces_tbl.normalized_diameter_trace;
         flux_trace = traces_tbl.normalized_flux_trace;
         diam_edges = edges_tbl.normalized_diameter_edge;
         flux_edges = edges_tbl.normalized_flux_edge;
         %             figure; histogram2(diam_trace,flux_trace,diam_edges,flux_edges,'DisplayStyle','tile');

         %Assign to dynamic table: Pia
         col1 = types.hdmf_common.VectorData( ...
             'description', 'normalized diam trace', ...
             'data', diam_trace);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'normalized flux trace', ...
             'data', flux_trace);
         table_S3C_Traces = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'normalized diam trace', col1, ...
             'normalized flux trace', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('FluxDiameterModulationJointDistributionTracesS3C', table_S3C_Traces);

         %Assign to dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'normalized diam bin edges', ...
             'data', diam_edges);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'normalized flux bin edges', ...
             'data', flux_edges);
         table_S3C_BinEdges = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'normalized diam bin edges', col1, ...
             'normalized flux bin edges', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('FluxDiameterModulationJointDistributionEdgesS3C', table_S3C_BinEdges);
     end
     %% Figure S3D Start
     if contains(subj_figs,' S3d')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path
         %Scatter plot, R2 vs diameter modulation
         table = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS3\D\DKLab_JDRLXJ_radius_phase_modulation_vsDfit_med_stat.csv");
         is_pia = logical(table.is_pia);
         a_c = table.a2c;
         a_c_fit_R2 = table.a2c_fit_R2;
         avg_diam = 2.*table.avg_radius_um;

         piaA_c = a_c(is_pia);
         PAA_c = a_c(~is_pia);
         piaA_c_R2 = a_c_fit_R2(is_pia);
         PAA_c_R2 = a_c_fit_R2(~is_pia);
         piaA_c_Diam = avg_diam(is_pia);
         PAA_c_Diam = avg_diam(~is_pia);

         %Assign to dynamic table: Pia
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Pia Modulation Depth', ...
             'data', piaA_c);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Pia Fit R2', ...
             'data', piaA_c_R2);
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Pia Average Diameter (um)', ...
             'data', piaA_c_Diam);
         table_S3D_Pia = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Pia Modulation Depth', col1, ...
             'Pia Fit R2', col2, ...
             'Pia Average Diameter',col3,...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PiaDiameterModulationS3D', table_S3D_Pia);

         %Assign to dynamic table: PA
         col1 = types.hdmf_common.VectorData( ...
             'description', 'PA Modulation Depth', ...
             'data', PAA_c);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'PA Fit R2', ...
             'data', PAA_c_R2);
         col3 = types.hdmf_common.VectorData( ...
             'description', 'PA Average Diameter (um)', ...
             'data', PAA_c_Diam);
         table_S3D_PA = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'PA Modulation Depth', col1, ...
             'PA Fit R2', col2, ...
             'PA Average Diameter',col3,...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PADiameterModulationS3D', table_S3D_PA);
     end


     %% Figure S3E Start
     if contains(subj_figs,' S3e')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path
         %Scatter plot, R2 vs diameter modulation
         table = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS3\E\DKLab_JDRLXJ_flux_phase_modulation_vsDfit_med_stat.csv");
         is_pia = logical(table.is_pia);
         a_c = table.a2c;
         a_c_fit_R2 = table.a2c_fit_R2;
         avg_diam = 2.*table.avg_radius_um;

         piaA_c = a_c(is_pia);
         PAA_c = a_c(~is_pia);
         piaA_c_R2 = a_c_fit_R2(is_pia);
         PAA_c_R2 = a_c_fit_R2(~is_pia);
         piaA_c_Diam = avg_diam(is_pia);
         PAA_c_Diam = avg_diam(~is_pia);

         %Assign to dynamic table: Pia
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Pia Flux Modulation Depth', ...
             'data', piaA_c);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Pia Flux Fit R2', ...
             'data', piaA_c_R2);
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Pia Average Diameter (um)', ...
             'data', piaA_c_Diam);
         table_S3E_Pia = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Pia Flux Modulation Depth', col1, ...
             'Pia Flux Fit R2', col2, ...
             'Pia Average Diameter',col3,...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PiaFluxModulationS3E', table_S3E_Pia);

         %Assign to dynamic table: PA
         col1 = types.hdmf_common.VectorData( ...
             'description', 'PA Flux Modulation Depth', ...
             'data', PAA_c);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'PA Flux Fit R2', ...
             'data', PAA_c_R2);
         col3 = types.hdmf_common.VectorData( ...
             'description', 'PA Average Diameter (um)', ...
             'data', PAA_c_Diam);
         table_S3E_PA = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'PA Modulation Depth', col1, ...
             'PA Fit R2', col2, ...
             'PA Average Diameter',col3,...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PAFluxModulationS3E', table_S3E_PA);
     end

     %% Figure S3F Start
     if contains(subj_figs,' S3f')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path
         %Scatter plot, Inv Variance vs flux - diameter slope
         table = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS3\F\DKLab_JDRLXJ_flux_vs_radius_fit_slope_vsD_invVAR_01HzStimfit_med_stat.csv");
         is_pia = logical(table.is_pia);
         beta = table.q2r_k;
         beta_invVAR = table.q2r_invVAR;
         avg_diam = 2*table.avg_radius_um;

         pia_beta = beta(is_pia);
         PA_beta = beta(~is_pia);
         pia_beta_invVAR = beta_invVAR(is_pia);
         PA_beta_invVAR = beta_invVAR(~is_pia);
         pia_Diam = avg_diam(is_pia);
         PA_Diam = avg_diam(~is_pia);

         %Assign to dynamic table: Pia
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Pia Beta', ...
             'data', pia_beta);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Pia Beta Inverse Variance', ...
             'data', pia_beta_invVAR);
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Pia Average Diameter (um)', ...
             'data', pia_Diam);
         table_S3F_Pia = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Pia Beta', col1, ...
             'Pia Beta Inverse Variance', col2, ...
             'Pia Average Diameter',col3,...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PiaFluxDiameterModulationS3F', table_S3F_Pia);

         %Assign to dynamic table: Pia
         col1 = types.hdmf_common.VectorData( ...
             'description', 'PA Beta', ...
             'data', PA_beta);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'PA Beta Inverse Variance', ...
             'data', PA_beta_invVAR);
         col3 = types.hdmf_common.VectorData( ...
             'description', 'PA Average Diameter (um)', ...
             'data', PA_Diam);
         table_S3F_PA = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'PA Beta', col1, ...
             'PA Beta Inverse Variance', col2, ...
             'PA Average Diameter',col3,...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PAFluxDiameterModulationS3F', table_S3F_PA);
     end

     %% Figure S4B Start
     %JD230523R1495trials_011524_ROI_010_00001
     % Z:\Jacob\Flux\DKLab\JDRLXJ\visualization\SuppFig
     % TBRLBB_post_processing_single_frame_ReaChR.m

    if contains(subj_figs,' S4b')
        clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

        table = readtable("Z:\Jacob\Flux\DKLab\JDRLXJ\visualization\SuppFig\Supp4B_FullTraces.csv");
        time = table.time;
        flux_Hz = table.flux_trace;
        diameter_um = table.diam_trace;

        timeseries_flux = nwb.acquisition.set('FluxTraceReaChRS4B', types.core.TimeSeries('data', flux_Hz, 'description', 'FluxTrace (Hz)','data_unit','Hz',...
            'timestamps',time));
        timeseries_diameter = nwb.acquisition.set('DiamTraceReaChRS4B', types.core.TimeSeries('data', diameter_um, 'description', 'DiameterTrace (um)','data_unit','um',...
            'timestamps',time));
    end
    
    %% Figure S4C Start (Joint distribution 2d histogram like 1
    %avoid hard-coding:
    %"Z:\Jacob\Flux\DKLab\JDRLXJ\visualization\SuppFig\Flux_Diameter_Example_Traces_Supp4C.csv"
    %"Z:\Jacob\Flux\DKLab\JDRLXJ\visualization\SuppFig\Flux_Diameter_Example_Edges_Supp4C.csv"

    if contains(subj_figs,' S4c')
        clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path
        traces_tbl = readtable("Z:\Jacob\Flux\DKLab\JDRLXJ\visualization\SuppFig\Flux_Diameter_Example_Traces_Supp4C.csv");
        edges_tbl = readtable("Z:\Jacob\Flux\DKLab\JDRLXJ\visualization\SuppFig\Flux_Diameter_Example_Edges_Supp4C.csv");
        diam_trace = traces_tbl.d_trace_n;
        flux_trace = traces_tbl.flux_trace_n;
        diam_edges = edges_tbl.d_n_edge;
        flux_edges = edges_tbl.flux_n_edge;
%             figure; histogram2(diam_trace,flux_trace,diam_edges,flux_edges,'DisplayStyle','tile');

        %Assign to dynamic table: Pia
        col1 = types.hdmf_common.VectorData( ...
            'description', 'normalized diam trace', ...
            'data', diam_trace);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'normalized flux trace', ...
            'data', flux_trace);
        table_S4C_Traces = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'normalized diam trace', col1, ...
            'normalized flux trace', col2, ...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        nwb.analysis.set('FluxDiameterModulationJointDistributionTracesReaChRS4C', table_S4C_Traces);

        %Assign to dynamic table
        col1 = types.hdmf_common.VectorData( ...
            'description', 'normalized diam bin edges', ...
            'data', diam_edges);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'normalized flux bin edges', ...
            'data', flux_edges);
        table_S4C_BinEdges = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'normalized diam bin edges', col1, ...
            'normalized flux bin edges', col2, ...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        nwb.analysis.set('FluxDiameterModulationJointDistributionEdgesReaChRS4C', table_S4C_BinEdges);
    end

     %% Figure S4D Start
     %avoid hard-coding:
%"Z:\Jacob\Flux\DKLab\JDRLXJ\visualization\Q_D_Fit_Intercepts\DKLab_JDRLXJ_flux_vs_radius_fit_slope_vsD_invVAR_ReaChRfit_med_stat.csv"

    if contains(subj_figs,' S4d')
        clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

        table = readtable("Z:\Jacob\Flux\DKLab\JDRLXJ\visualization\Q_D_Fit_Intercepts\DKLab_JDRLXJ_flux_vs_radius_fit_slope_vsD_invVAR_ReaChRfit_med_stat.csv");

        beta = table.q2r_k;
        beta_invVAR = table.q2r_invVAR;
        avg_diam = 2*table.avg_radius_um;
        is_pia = table.is_pia;

        pia_beta = beta(is_pia);
        pia_beta_invVAR = beta_invVAR(is_pia);
        pia_Diam = avg_diam(is_pia);

        %Assign to dynamic table: Pia
        col1 = types.hdmf_common.VectorData( ...
            'description', 'Pia Beta', ...
            'data', pia_beta);
        col1_len = length(col1.data);
        col2 = types.hdmf_common.VectorData( ...
            'description', 'Pia Beta Inverse Variance', ...
            'data', pia_beta_invVAR);
        col3 = types.hdmf_common.VectorData( ...
            'description', 'Pia Average Diameter (um)', ...
            'data', pia_Diam);
        table_S4D_Pia = types.hdmf_common.DynamicTable( ...
            'description', 'analysis table', ...
            'Pia Beta', col1, ...
            'Pia Beta Inverse Variance', col2, ...
            'Pia Average Diameter',col3,...
            'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
            );
        nwb.analysis.set('PiaFluxDiameterModulationReaChRS4D', table_S4D_Pia);
    end

     %% Figure S5 Start
     if contains(subj_figs,' S5')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         corr_tbl = readtable(strcat(summary_data_path, '\IndividualFigures\FigS5\FigS5_ScatterData.csv'));

         %corr_tbl = readtable("\\dk-server.dk.ucsd.edu\jaduckwo\DataAnalysis\VesCorrPhase\IndividualFigures\FigS5\FigS5_ScatterData.csv");

         dist_pts = corr_tbl.dist;
         corr_pts = corr_tbl.correlation;
         %             figure; scatter(dist_pts,corr_pts,'filled');

         %Assign to dynamic table: Pia
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Median pair distance in bin (mm)', ...
             'data', dist_pts);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Average travel direction correlation in bin', ...
             'data', corr_pts);
         table_S5_Pts = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Median pair distance (mm)', col1, ...
             'Average correlation', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('PATravelDirectionCorrelationS5', table_S5_Pts);
     end

     %% Figure S6A Start
    if contains(subj_figs,' S6a')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         table = readtable(strcat(summary_data_path, '\IndividualFigures\FigS6\CaDSpectra.csv'));

         %table = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS6\CaDSpectra.csv");

         freq = table.f;
         CaNormS = table.CaNormS;
         CaNormSErrLow = table.CaNormSErrLow;
         CaNormSErrHigh = table.CaNormSErrHigh;
         DNormS = table.DNormS;
         DNormSErrLow = table.DNormSErrLow;
         DNormSErrHigh = table.DNormSErrHigh;

         %Assign to dynamic table: Pia
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Frequency (Hz)', ...
             'data', freq);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Average Normalized GCaMP Spectrum', ...
             'data', CaNormS);
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Lower 95%CI Normalized GCaMP Spectrum', ...
             'data', CaNormSErrLow);
         col4 = types.hdmf_common.VectorData( ...
             'description', 'Upper 95%CI Normalized GCaMP Spectrum', ...
             'data', CaNormSErrHigh);
         col5 = types.hdmf_common.VectorData( ...
             'description', 'Average Normalized Diameter Spectrum', ...
             'data', DNormS);
         col6 = types.hdmf_common.VectorData( ...
             'description', 'Lower 95%CI Normalized Diameter Spectrum', ...
             'data', DNormSErrLow);
         col7 = types.hdmf_common.VectorData( ...
             'description', 'Upper 95%CI Normalized Diameter Spectrum', ...
             'data', DNormSErrHigh);

         table_S6A_Pts = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Frequency (Hz)', col1, ...
             'Average Calcium Spectrum', col2, ...
             'Calcium Spectrum Lower 95%CI', col3, ...
             'Calcium Spectrum Upper 95%CI', col4, ...
             'Average Diameter Spectrum', col5, ...
             'Diameter Spectrum Lower 95%CI', col6, ...
             'Diameter Spectrum Upper 95%CI', col7, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('AverageGCaMPandDiamterSpectra FigureS6A', table_S6A_Pts);
     end   

     %% Figure S6B Start
     if contains(subj_figs,' S6b')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         table = readtable(strcat(summary_data_path, '\IndividualFigures\FigS6\CaDCoherence.csv'));
         
         %table = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS6\CaDCoherence.csv");

         freq = table.f;
         CaDC = table.C;
         CaDCErrLow = table.CerrLow;
         CaDCErrHigh = table.CerrHigh;

         %Assign to dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Frequency (Hz)', ...
             'data', freq);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Average Ca-D Coherence', ...
             'data', CaDC);
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Lower 95%CI Average Ca-D Coherence', ...
             'data', CaDCErrLow);
         col4 = types.hdmf_common.VectorData( ...
             'description', 'Upper 95%CI Average Ca-D Coherence', ...
             'data', CaDCErrHigh);

         table_S6B_Pts = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Frequency (Hz)', col1, ...
             'Average Ca-D Coherence', col2, ...
             'Ca-D Coherence Lower 95%CI', col3, ...
             'Ca-D Coherence Upper 95%CI', col4, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('AverageGCaMPandDiamterCoherenceFigureS6B', table_S6B_Pts);

         %PHASE
         table = readtable(strcat(summary_data_path, '\IndividualFigures\FigS6\CaDPhase.csv'));

         %table = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS6\CaDPhase.csv");

         freq = table.phi_f;
         phi = table.phi;
         phi2SD = table.phi95CI;

         %Assign to dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Frequency (Hz)', ...
             'data', freq);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Average Ca-D Phase', ...
             'data', phi);
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Average Ca-D Phase 2SD', ...
             'data', phi2SD);

         table_S6B_Phase = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Frequency (Hz)', col1, ...
             'Average Ca-D Phase', col2, ...
             'Ca-D Phase 2SD', col3, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('AverageGCaMPandDiamterPhaseFigureS6B', table_S6B_Phase);         
     end

     %% Figure S6C Start
     if contains(subj_figs,' S6C')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

        %Vascular phase progression
        table = readtable(strcat(summary_data_path, '\IndividualFigures\FigS6\S6C\VesPhaseProgressionS6C.csv'));

         %table = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS6\S6C\VesPhaseProgressionS6C.csv");

         dist = table.dist;
         phase = table.phase;
         %Assign to dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Distance (mm)', ...
             'data', dist);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Vessel Phase (rad)', ...
             'data', phase);
         table_S6C_Pts = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Distance (mm)', col1, ...
             'Vessel Phase (rad)', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('VascularPhaseProgressionS6C', table_S6C_Pts);

        %Neuronal phase progression
        table = readtable(strcat(summary_data_path, '\IndividualFigures\FigS6\S6C\NeuPhaseProgressionS6C.csv'));

        % table = readtable("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS6\S6C\NeuPhaseProgressionS6C.csv");

         dist = table.dist;
         phase = table.phase;
         %Assign to dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Distance (mm)', ...
             'data', dist);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Neuron Signal Phase (rad)', ...
             'data', phase);
         table_S6C_Neu_Pts = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Distance (mm)', col1, ...
             'Neuron Signal Phase (rad)', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('NeuronalPhaseProgressionS6C', table_S6C_Neu_Pts);
     end

     %% Figure S7A
     if contains(subj_figs,' S7a')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         load(strcat(summary_data_path, "\IndividualFigures\FigS7\S7A\h1.mat")); 
         %load("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS7\S7A\h1.mat")

         label_x={'F7','F2-2','F2','M4','F3','M2','F9','F10', 'M3'}';
         %Try saving h1{1,1} directly in dynamic table (include NaN values).
         %Assign to dynamic table
         train = h1{1,1};
         test = h1{2,1};
         col1 = types.hdmf_common.VectorData( ...
             'description', label_x{1}, ...
             'data', train(:,1));
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', label_x{2}, ...
             'data', train(:,2));
         col3 = types.hdmf_common.VectorData( ...
             'description', label_x{3}, ...
             'data', train(:,3));
         col4 = types.hdmf_common.VectorData( ...
             'description', label_x{4}, ...
             'data', train(:,4));
         col5 = types.hdmf_common.VectorData( ...
             'description', label_x{5}, ...
             'data', train(:,5));
         col6 = types.hdmf_common.VectorData( ...
             'description', label_x{6}, ...
             'data', train(:,6));
         col7 = types.hdmf_common.VectorData( ...
             'description', label_x{7}, ...
             'data', train(:,7));
         col8 = types.hdmf_common.VectorData( ...
             'description', label_x{8}, ...
             'data', train(:,8));
         col9 = types.hdmf_common.VectorData( ...
             'description', label_x{9}, ...
             'data', train(:,9));

         table_S7A_train = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             label_x{1}, col1, ...
             label_x{2}, col2, ...
             label_x{3}, col3, ...
             label_x{4}, col4, ...
             label_x{5}, col5, ...
             label_x{6}, col6, ...
             label_x{7}, col7, ...
             label_x{8}, col8, ...
             label_x{9}, col9, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('GRaFTRsquareRestNeuronsFromVesselsTrainS7A', table_S7A_train);

         %TESTING DATA
         col1 = types.hdmf_common.VectorData( ...
             'description', label_x{1}, ...
             'data', test(:,1));
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', label_x{2}, ...
             'data', test(:,2));
         col3 = types.hdmf_common.VectorData( ...
             'description', label_x{3}, ...
             'data', test(:,3));
         col4 = types.hdmf_common.VectorData( ...
             'description', label_x{4}, ...
             'data', test(:,4));
         col5 = types.hdmf_common.VectorData( ...
             'description', label_x{5}, ...
             'data', test(:,5));
         col6 = types.hdmf_common.VectorData( ...
             'description', label_x{6}, ...
             'data', test(:,6));
         col7 = types.hdmf_common.VectorData( ...
             'description', label_x{7}, ...
             'data', test(:,7));
         col8 = types.hdmf_common.VectorData( ...
             'description', label_x{8}, ...
             'data', test(:,8));
         col9 = types.hdmf_common.VectorData( ...
             'description', label_x{9}, ...
             'data', test(:,9));

         table_S7A_test = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             label_x{1}, col1, ...
             label_x{2}, col2, ...
             label_x{3}, col3, ...
             label_x{4}, col4, ...
             label_x{5}, col5, ...
             label_x{6}, col6, ...
             label_x{7}, col7, ...
             label_x{8}, col8, ...
             label_x{9}, col9, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('GRaFTRsquareRestNeuronsFromVesselsTestS7A', table_S7A_test);

     end

     %% Figure S7B
     if contains(subj_figs,' S7b')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         load(strcat(summary_data_path, "\IndividualFigures\FigS7\S7B\h1_v2n.mat"));
         %load("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS7\S7B\h1_v2n.mat")

         label_x={'F7','F2-2','F2','M4','F3','M2','F9','F10', 'M3'}';

         train = h1_v2n{1,1};
         test = h1_v2n{2,1};
         col1 = types.hdmf_common.VectorData( ...
             'description', label_x{1}, ...
             'data', train(:,1));
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', label_x{2}, ...
             'data', train(:,2));
         col3 = types.hdmf_common.VectorData( ...
             'description', label_x{3}, ...
             'data', train(:,3));
         col4 = types.hdmf_common.VectorData( ...
             'description', label_x{4}, ...
             'data', train(:,4));
         col5 = types.hdmf_common.VectorData( ...
             'description', label_x{5}, ...
             'data', train(:,5));
         col6 = types.hdmf_common.VectorData( ...
             'description', label_x{6}, ...
             'data', train(:,6));
         col7 = types.hdmf_common.VectorData( ...
             'description', label_x{7}, ...
             'data', train(:,7));
         col8 = types.hdmf_common.VectorData( ...
             'description', label_x{8}, ...
             'data', train(:,8));
         col9 = types.hdmf_common.VectorData( ...
             'description', label_x{9}, ...
             'data', train(:,9));

         table_S7B_train = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             label_x{1}, col1, ...
             label_x{2}, col2, ...
             label_x{3}, col3, ...
             label_x{4}, col4, ...
             label_x{5}, col5, ...
             label_x{6}, col6, ...
             label_x{7}, col7, ...
             label_x{8}, col8, ...
             label_x{9}, col9, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('GRaFTRsquareStimNeuronsFromVesselsTrainS7B', table_S7B_train);

         %TESTING DATA
         col1 = types.hdmf_common.VectorData( ...
             'description', label_x{1}, ...
             'data', test(:,1));
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', label_x{2}, ...
             'data', test(:,2));
         col3 = types.hdmf_common.VectorData( ...
             'description', label_x{3}, ...
             'data', test(:,3));
         col4 = types.hdmf_common.VectorData( ...
             'description', label_x{4}, ...
             'data', test(:,4));
         col5 = types.hdmf_common.VectorData( ...
             'description', label_x{5}, ...
             'data', test(:,5));
         col6 = types.hdmf_common.VectorData( ...
             'description', label_x{6}, ...
             'data', test(:,6));
         col7 = types.hdmf_common.VectorData( ...
             'description', label_x{7}, ...
             'data', test(:,7));
         col8 = types.hdmf_common.VectorData( ...
             'description', label_x{8}, ...
             'data', test(:,8));
         col9 = types.hdmf_common.VectorData( ...
             'description', label_x{9}, ...
             'data', test(:,9));

         table_S7B_test = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             label_x{1}, col1, ...
             label_x{2}, col2, ...
             label_x{3}, col3, ...
             label_x{4}, col4, ...
             label_x{5}, col5, ...
             label_x{6}, col6, ...
             label_x{7}, col7, ...
             label_x{8}, col8, ...
             label_x{9}, col9, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('GRaFTRsquareStimNeuronsFromVesselsTestS7B', table_S7B_test);
     end

     %% Figure S7C
     if contains(subj_figs,' S7c')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         load(strcat(summary_data_path, "\IndividualFigures\FigS7\S7C\h1_n2v.mat"));
         %load("Y:\DataAnalysis\VesCorrPhase\IndividualFigures\FigS7\S7C\h1_n2v.mat")

         label_x={'F7','F2-2','F2','M4','F3','M2','F9','F10', 'M3'}';

         train = h1_n2v{1,1};
         test = h1_n2v{2,1};
         col1 = types.hdmf_common.VectorData( ...
             'description', label_x{1}, ...
             'data', train(:,1));
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', label_x{2}, ...
             'data', train(:,2));
         col3 = types.hdmf_common.VectorData( ...
             'description', label_x{3}, ...
             'data', train(:,3));
         col4 = types.hdmf_common.VectorData( ...
             'description', label_x{4}, ...
             'data', train(:,4));
         col5 = types.hdmf_common.VectorData( ...
             'description', label_x{5}, ...
             'data', train(:,5));
         col6 = types.hdmf_common.VectorData( ...
             'description', label_x{6}, ...
             'data', train(:,6));
         col7 = types.hdmf_common.VectorData( ...
             'description', label_x{7}, ...
             'data', train(:,7));
         col8 = types.hdmf_common.VectorData( ...
             'description', label_x{8}, ...
             'data', train(:,8));
         col9 = types.hdmf_common.VectorData( ...
             'description', label_x{9}, ...
             'data', train(:,9));

         table_S7C_train = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             label_x{1}, col1, ...
             label_x{2}, col2, ...
             label_x{3}, col3, ...
             label_x{4}, col4, ...
             label_x{5}, col5, ...
             label_x{6}, col6, ...
             label_x{7}, col7, ...
             label_x{8}, col8, ...
             label_x{9}, col9, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('GRaFTRsquareStimVesselsFromNeuronsTrainS7C', table_S7C_train);

         %TESTING DATA
         col1 = types.hdmf_common.VectorData( ...
             'description', label_x{1}, ...
             'data', test(:,1));
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', label_x{2}, ...
             'data', test(:,2));
         col3 = types.hdmf_common.VectorData( ...
             'description', label_x{3}, ...
             'data', test(:,3));
         col4 = types.hdmf_common.VectorData( ...
             'description', label_x{4}, ...
             'data', test(:,4));
         col5 = types.hdmf_common.VectorData( ...
             'description', label_x{5}, ...
             'data', test(:,5));
         col6 = types.hdmf_common.VectorData( ...
             'description', label_x{6}, ...
             'data', test(:,6));
         col7 = types.hdmf_common.VectorData( ...
             'description', label_x{7}, ...
             'data', test(:,7));
         col8 = types.hdmf_common.VectorData( ...
             'description', label_x{8}, ...
             'data', test(:,8));
         col9 = types.hdmf_common.VectorData( ...
             'description', label_x{9}, ...
             'data', test(:,9));

         table_S7C_test = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             label_x{1}, col1, ...
             label_x{2}, col2, ...
             label_x{3}, col3, ...
             label_x{4}, col4, ...
             label_x{5}, col5, ...
             label_x{6}, col6, ...
             label_x{7}, col7, ...
             label_x{8}, col8, ...
             label_x{9}, col9, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('GRaFTRsquareStimVesselsFromNeuronsTestS7C', table_S7C_test);
     end

     %% Figure S8A
     if contains(subj_figs,' S8a')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         %avoid hard-coding: 
         %"Y:\DataAnalysis\VesCorrPhase\AllSegments\ShortDistAnalysis\Supp8\ExamplePhaseProg_20Mar2020_170741_TB013120M4_Ves91_FullDistAndPhase.mat"

         load("Y:\DataAnalysis\VesCorrPhase\AllSegments\ShortDistAnalysis\Supp8\ExamplePhaseProg_20Mar2020_170741_TB013120M4_Ves91_FullDistAndPhase.mat");
         phase = plotstruct(1).fullphase;
         dist = plotstruct(1).fulldist;
         %Assign to dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Distance (mm)', ...
             'data', dist);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Vessel Phase (rad)', ...
             'data', phase);
         table_S8A_Pts = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Distance', col1, ...
             'Vessel Phase', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('VascularPhaseProgressionS8A', table_S8A_Pts);

     end
    
%% Figure S8B
     if contains(subj_figs,'S8b')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

         %avoid hard-coding: 
         %"Y:\DataAnalysis\VesCorrPhase\AllSegments\ShortDistAnalysis\alpha0_01\files_allspeeds.mat"

         load("Y:\DataAnalysis\VesCorrPhase\AllSegments\ShortDistAnalysis\alpha0_01\files_allspeeds.mat");

         for i = 1:length(files)
             files(i).meanlength = mean(files(i).all_length);
             minlen(i) = min(files(i).all_length);
             maxlen(i) = max(files(i).all_length);
         end
         lengths = [files.meanlength];
         speed = [files.speed];
         speedSE = [files.speedSE];
         lengthlowerlim = lengths - minlen;
         lengthupperlim = maxlen - lengths;
         colormat = zeros(length(lengths),3);
         colormat(:,3) = 1;

         figure
         errorbar(lengths,speed,speedSE,speedSE,lengthlowerlim,lengthupperlim,"o",'LineWidth',1,'Color','k');
         hold on;
         scatter(lengths,speed,25,colormat,'filled');
         xlabel('Average vessel length analyzed (mm)','Interpreter','latex');
         ylabel('$Ca^{2+}$ wave speed (from $f$ vs $|k|$ fit)','Interpreter','latex');
         title({'$Ca^{2+}$ wave speeds calculated on different vessel segment lengths','Red = our full dataset ($>$0.75mm), Blue = Shorter vessel segments chosen randomly'},'Interpreter','latex');
         xlim([0 2]); ylim([0.5 2.5]);
         
         %Assign to dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Mean Distance (mm)', ...
             'data', lengths);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Speed (mm/s)', ...
             'data', speed);
         col3 = types.hdmf_common.VectorData( ...
             'description', 'Speed SE (mm/s)', ...
             'data', speedSE);
         col4 = types.hdmf_common.VectorData( ...
             'description', 'Length Lower Limit (mm)', ...
             'data', lengthlowerlim);
         col5 = types.hdmf_common.VectorData( ...
             'description', 'Length Upper Limit (mm)', ...
             'data', lengthupperlim);         
         table_S8B_Pts = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Distance (mm)', col1, ...
             'Vessel Phase (rad)', col2, ...
             'Speed SE (rad)', col3, ...
             'Length Lower Limit (mm)', col4, ...
             'Length Upper Limit (mm)', col5, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('VascularWaveSpeedsatDifferentLengthsS8B', table_S8B_Pts);
     end

     %% Figure S8C
     if contains(subj_figs,' S8c')
         clearvars -except subj_session_id summary_data_path subj_figs primary_experiments_table subj nwb output_path

        %First plot
        %avoid hard-coding: 
        load("Y:\DataAnalysis\VesCorrPhase\AllSegments\ShortDistAnalysis\Supp8\ExamplePhaseProg_M4_20Mar_16_11_53_Ves155.mat");

        phase = plotstruct(1).fullphase;
        dist = plotstruct(1).fulldist;
        %Assign to dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Distance (mm)', ...
             'data', dist);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Vessel Phase (rad)', ...
             'data', phase);
         table_S8C_Pts = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Distance (mm)', col1, ...
             'Vessel Phase (rad)', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('VascularPhaseProgression3S8C', table_S8C_Pts);
         clearvars tmp phase dist

         %avoid hard-coding: 
        load("Y:\DataAnalysis\VesCorrPhase\AllSegments\ShortDistAnalysis\Supp8\ExamplePhaseProg_M4_20Mar_16_11_53_Ves205.mat");
        phase = plotstruct(1).fullphase;
        dist = plotstruct(1).fulldist;
        %Assign to dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Distance (mm)', ...
             'data', dist);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Vessel Phase (rad)', ...
             'data', phase);
         table_S8C_Pts = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Distance (mm)', col1, ...
             'Vessel Phase (rad)', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('VascularPhaseProgression1S8C', table_S8C_Pts);
         clearvars tmp phase dist     

         %avoid hard-coding: 
        load("Y:\DataAnalysis\VesCorrPhase\AllSegments\ShortDistAnalysis\Supp8\ExamplePhaseProg_M4_20Mar_16_41_56_Ves26.mat");
        phase = plotstruct(1).fullphase;
        dist = plotstruct(1).fulldist;
        %Assign to dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Distance (mm)', ...
             'data', dist);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Vessel Phase (rad)', ...
             'data', phase);
         table_S8C_Pts = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Distance (mm)', col1, ...
             'Vessel Phase (rad)', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('VascularPhaseProgression2S8C', table_S8C_Pts);
         clearvars tmp phase dist   

         %avoid hard-coding: 
        load("Y:\DataAnalysis\VesCorrPhase\AllSegments\ShortDistAnalysis\Supp8\ExamplePhaseProg_M4_20Mar_16_41_56_Ves81.mat");
        phase = plotstruct(1).fullphase;
        dist = plotstruct(1).fulldist;
        %Assign to dynamic table
         col1 = types.hdmf_common.VectorData( ...
             'description', 'Distance (mm)', ...
             'data', dist);
         col1_len = length(col1.data);
         col2 = types.hdmf_common.VectorData( ...
             'description', 'Vessel Phase (rad)', ...
             'data', phase);
         table_S8C_Pts = types.hdmf_common.DynamicTable( ...
             'description', 'analysis table', ...
             'Distance (mm)', col1, ...
             'Vessel Phase (rad)', col2, ...
             'id', types.hdmf_common.ElementIdentifiers('data', linspace(1,col1_len,col1_len)) ...
             );
         nwb.analysis.set('VascularPhaseProgression4S8C', table_S8C_Pts);

     end

     %% Final export start
     nwbExport(nwb, fullfile(output_path, ['Subject_',sprintf('%.0f',subj),'_',strrep(subj_session_id{1},'-','_'),'.nwb']));
     clearvars nwb
end
%      disp('Summary ****')

%% Generate subject object
function [tmp_Subject] = getsubject(age,age_description,species,sex,subject_id,description,strain,DOB,genotype)
tmp_Subject = types.core.Subject( ...
    'age', age, ...
    'age_description',age_description, ...
    'species', species, ...
    'sex', sex, ...
    'subject_id', subject_id, ...
    'description', description,...
    'strain',strain,...
    'date_of_birth',datetime(DOB,TimeZone="America/Los_Angeles"),...
    'genotype',genotype...
    );
end
